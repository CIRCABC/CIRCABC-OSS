/**
 * CIRCABC REST API
 * This is the first version of the CIRCABC REST API used by the new User Interface 
 *
 * The version of the OpenAPI document: 4.2.4.3
 * Contact: DIGIT-CIRCABC-SUPPORT@ec.europa.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { PagedSearchNodes } from '../model/pagedSearchNodes';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class SearchService {

    protected basePath = 'http://../service/circabc';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * the search entry point
     * @param q the text used to query in the system
     * @param node the node to which the query is start
     * @param language to filter for a specific language
     * @param searchFor All, Name, Title, Content
     * @param searchIn All, Library, Forums, Information or Agenda
     * @param creator who created the file
     * @param creationDateFrom to filter the documents with a creation date after or equal to the given date in YYYY-MM-DD format
     * @param creationDateTo to filter the documents with a creation date before or equal to the given date in YYYY-MM-DD format
     * @param modifiedDateFrom to filter the documents modified after or equal to the given date in YYYY-MM-DD format
     * @param modifiedDateTo to filter the documents modified before or equal to the given date in YYYY-MM-DD format
     * @param keywords comma separated list of keywords
     * @param status status of a file
     * @param securityRanking securityRanking of a file
     * @param version version label of a file
     * @param sort on which parameter we will sort the results (Name, Title, Creation_Date, Modification_Date, Issue_Date)
     * @param order order of sorting, ascending (Asc) or descending (Desc) order
     * @param dynAttr1 Dynamic Atribute 1
     * @param dynAttr2 Dynamic Atribute 2
     * @param dynAttr3 Dynamic Atribute 3
     * @param dynAttr4 Dynamic Atribute 4
     * @param dynAttr5 Dynamic Atribute 5
     * @param dynAttr6 Dynamic Atribute 6
     * @param dynAttr7 Dynamic Atribute 7
     * @param dynAttr8 Dynamic Atribute 8
     * @param dynAttr9 Dynamic Atribute 9
     * @param dynAttr10 Dynamic Atribute 10
     * @param dynAttr11 Dynamic Atribute 11
     * @param dynAttr12 Dynamic Atribute 12
     * @param dynAttr13 Dynamic Atribute 13
     * @param dynAttr14 Dynamic Atribute 14
     * @param dynAttr15 Dynamic Atribute 15
     * @param dynAttr16 Dynamic Atribute 16
     * @param dynAttr17 Dynamic Atribute 17
     * @param dynAttr18 Dynamic Atribute 18
     * @param dynAttr19 Dynamic Atribute 19
     * @param dynAttr20 Dynamic Atribute 20
     * @param limit the number of result(s) per page. if not set, the default value (250) is used 
     * @param page the number of the page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSearch(q: string, node: string, language?: string, searchFor?: string, searchIn?: string, creator?: string, creationDateFrom?: string, creationDateTo?: string, modifiedDateFrom?: string, modifiedDateTo?: string, keywords?: string, status?: string, securityRanking?: string, version?: string, sort?: string, order?: string, dynAttr1?: string, dynAttr2?: string, dynAttr3?: string, dynAttr4?: string, dynAttr5?: string, dynAttr6?: string, dynAttr7?: string, dynAttr8?: string, dynAttr9?: string, dynAttr10?: string, dynAttr11?: string, dynAttr12?: string, dynAttr13?: string, dynAttr14?: string, dynAttr15?: string, dynAttr16?: string, dynAttr17?: string, dynAttr18?: string, dynAttr19?: string, dynAttr20?: string, limit?: number, page?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json',}): Observable<PagedSearchNodes>;
    public getSearch(q: string, node: string, language?: string, searchFor?: string, searchIn?: string, creator?: string, creationDateFrom?: string, creationDateTo?: string, modifiedDateFrom?: string, modifiedDateTo?: string, keywords?: string, status?: string, securityRanking?: string, version?: string, sort?: string, order?: string, dynAttr1?: string, dynAttr2?: string, dynAttr3?: string, dynAttr4?: string, dynAttr5?: string, dynAttr6?: string, dynAttr7?: string, dynAttr8?: string, dynAttr9?: string, dynAttr10?: string, dynAttr11?: string, dynAttr12?: string, dynAttr13?: string, dynAttr14?: string, dynAttr15?: string, dynAttr16?: string, dynAttr17?: string, dynAttr18?: string, dynAttr19?: string, dynAttr20?: string, limit?: number, page?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json',}): Observable<HttpResponse<PagedSearchNodes>>;
    public getSearch(q: string, node: string, language?: string, searchFor?: string, searchIn?: string, creator?: string, creationDateFrom?: string, creationDateTo?: string, modifiedDateFrom?: string, modifiedDateTo?: string, keywords?: string, status?: string, securityRanking?: string, version?: string, sort?: string, order?: string, dynAttr1?: string, dynAttr2?: string, dynAttr3?: string, dynAttr4?: string, dynAttr5?: string, dynAttr6?: string, dynAttr7?: string, dynAttr8?: string, dynAttr9?: string, dynAttr10?: string, dynAttr11?: string, dynAttr12?: string, dynAttr13?: string, dynAttr14?: string, dynAttr15?: string, dynAttr16?: string, dynAttr17?: string, dynAttr18?: string, dynAttr19?: string, dynAttr20?: string, limit?: number, page?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json',}): Observable<HttpEvent<PagedSearchNodes>>;
    public getSearch(q: string, node: string, language?: string, searchFor?: string, searchIn?: string, creator?: string, creationDateFrom?: string, creationDateTo?: string, modifiedDateFrom?: string, modifiedDateTo?: string, keywords?: string, status?: string, securityRanking?: string, version?: string, sort?: string, order?: string, dynAttr1?: string, dynAttr2?: string, dynAttr3?: string, dynAttr4?: string, dynAttr5?: string, dynAttr6?: string, dynAttr7?: string, dynAttr8?: string, dynAttr9?: string, dynAttr10?: string, dynAttr11?: string, dynAttr12?: string, dynAttr13?: string, dynAttr14?: string, dynAttr15?: string, dynAttr16?: string, dynAttr17?: string, dynAttr18?: string, dynAttr19?: string, dynAttr20?: string, limit?: number, page?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json',}): Observable<any> {
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling getSearch.');
        }
        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getSearch.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (q !== undefined && q !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>q, 'q');
        }
        if (node !== undefined && node !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>node, 'node');
        }
        if (language !== undefined && language !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>language, 'language');
        }
        if (searchFor !== undefined && searchFor !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchFor, 'searchFor');
        }
        if (searchIn !== undefined && searchIn !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchIn, 'searchIn');
        }
        if (creator !== undefined && creator !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>creator, 'creator');
        }
        if (creationDateFrom !== undefined && creationDateFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>creationDateFrom, 'creationDateFrom');
        }
        if (creationDateTo !== undefined && creationDateTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>creationDateTo, 'creationDateTo');
        }
        if (modifiedDateFrom !== undefined && modifiedDateFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>modifiedDateFrom, 'modifiedDateFrom');
        }
        if (modifiedDateTo !== undefined && modifiedDateTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>modifiedDateTo, 'modifiedDateTo');
        }
        if (keywords !== undefined && keywords !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>keywords, 'keywords');
        }
        if (status !== undefined && status !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>status, 'status');
        }
        if (securityRanking !== undefined && securityRanking !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>securityRanking, 'securityRanking');
        }
        if (version !== undefined && version !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>version, 'version');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'sort');
        }
        if (order !== undefined && order !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>order, 'order');
        }
        if (dynAttr1 !== undefined && dynAttr1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr1, 'dynAttr1');
        }
        if (dynAttr2 !== undefined && dynAttr2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr2, 'dynAttr2');
        }
        if (dynAttr3 !== undefined && dynAttr3 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr3, 'dynAttr3');
        }
        if (dynAttr4 !== undefined && dynAttr4 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr4, 'dynAttr4');
        }
        if (dynAttr5 !== undefined && dynAttr5 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr5, 'dynAttr5');
        }
        if (dynAttr6 !== undefined && dynAttr6 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr6, 'dynAttr6');
        }
        if (dynAttr7 !== undefined && dynAttr7 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr7, 'dynAttr7');
        }
        if (dynAttr8 !== undefined && dynAttr8 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr8, 'dynAttr8');
        }
        if (dynAttr9 !== undefined && dynAttr9 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr9, 'dynAttr9');
        }
        if (dynAttr10 !== undefined && dynAttr10 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr10, 'dynAttr10');
        }
        if (dynAttr11 !== undefined && dynAttr11 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr11, 'dynAttr11');
        }
        if (dynAttr12 !== undefined && dynAttr12 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr12, 'dynAttr12');
        }
        if (dynAttr13 !== undefined && dynAttr13 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr13, 'dynAttr13');
        }
        if (dynAttr14 !== undefined && dynAttr14 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr14, 'dynAttr14');
        }
        if (dynAttr15 !== undefined && dynAttr15 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr15, 'dynAttr15');
        }
        if (dynAttr16 !== undefined && dynAttr16 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr16, 'dynAttr16');
        }
        if (dynAttr17 !== undefined && dynAttr17 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr17, 'dynAttr17');
        }
        if (dynAttr18 !== undefined && dynAttr18 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr18, 'dynAttr18');
        }
        if (dynAttr19 !== undefined && dynAttr19 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr19, 'dynAttr19');
        }
        if (dynAttr20 !== undefined && dynAttr20 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dynAttr20, 'dynAttr20');
        }
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (basicAuth) required
        localVarCredential = this.configuration.lookupCredential('basicAuth');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Basic ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }



        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/search`;
        return this.httpClient.request<PagedSearchNodes>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
