openapi: '3.0.3'
info:
  version: '4.2.0'
  title: CIRCABC REST API
  description: >
    This is the first version of the CIRCABC REST API used by the new User
    Interface
  contact:
    name: API Support
    email: DIGIT-CIRCABC-SUPPORT@ec.europa.eu
    url: https://circabc.europa.eu/ui/help/contact
  license:
    name: EUPL-1.1
servers:
  - url: '/service/circabc'
    description: Default server
security:
  - basicAuth: []
paths:
  /headers:
    x-swagger-router-controller: header
    get:
      operationId: getHeaders
      security:
        - basicAuth: []
      tags:
        - Header
      description: |
        Gets all the `Headers` of the application.
        This call does not require any authentication token
      parameters:
        - name: language
          in: query
          description: 'Langauage code for example en,fr,de ...'
          required: false
          schema:
            type: string
        - name: guest
          in: query
          description: if true use guest user
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Header'
        '500':
          description: Internal Server Error
    post:
      operationId: postHeader
      security:
        - basicAuth: []
      tags:
        - Header
      description: Creates a new header in the application
      responses:
        '200':
          description: OK - Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Header'
        '403':
          description: Unauthorized
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Header'
  '/headers/{id}':
    x-swagger-router-controller: header
    get:
      operationId: getHeader
      security:
        - basicAuth: []
      tags:
        - Header
      description: Get one header
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Header'
        '405':
          description: Invalid id
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteHeader
      security:
        - basicAuth: []
      tags:
        - Header
      description: >
        Delete one header based on the id parameter To see if this is allowed
        and what will happen from all the categories and Interest group inside
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete OK
        '403':
          description: Unauthorized
        '405':
          description: Invalid id
        '500':
          description: Internal Server Error
    put:
      operationId: putHeader
      security:
        - basicAuth: []
      tags:
        - Header
      description: Updates a header in the application
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK - Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Header'
        '403':
          description: Unauthorized
        '405':
          description: Invalid id or object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Header'
  '/headers/{id}/categories':
    x-swagger-router-controller: header
    get:
      operationId: getCategoriesByHeaderId
      security:
        - basicAuth: []
      tags:
        - Header
      description: 'For one header, list its belonging categories'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
        - name: guest
          in: query
          description: if true use guest user
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '405':
          description: Invalid id
        '500':
          description: Internal Server Error
    post:
      operationId: postCategory
      security:
        - basicAuth: []
      tags:
        - Category
      description: creates a new category
      parameters:
        - name: id
          description: header id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '403':
          description: Unauthorized
        '405':
          description: Invalid ref or object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Category'
  /categories:
    get:
      operationId: getAllCategorories
      security:
        - basicAuth: []
      tags:
        - Category
      description: Get all the Categories belonging to all Headers in the application
      parameters:
        - name: language
          in: query
          required: false
          schema:
            type: string
        - name: guest
          in: query
          description: if true use guest user
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: internal server issue
  '/categories/{id}':
    get:
      operationId: getCategory
      security:
        - basicAuth: []
      tags:
        - Category
      description: get on categoy element given its reference
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteCategory
      security:
        - basicAuth: []
      tags:
        - Category
      description: >
        remove one category

        this action does not take into account the business behiond, if it
        removes all the Interest Group beneath
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
    put:
      operationId: putCategory
      security:
        - basicAuth: []
      tags:
        - Category
      description: updates a existing category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '403':
          description: Unauthorized
        '405':
          description: Invalid ref or object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Category'
  '/categories/{id}/logos':
    x-swagger-router-controller: category
    get:
      operationId: getCategoryLogoByCategoryId
      tags:
        - Category
      description: |
        get the list of logos that were uploaded in the category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
    post:
      operationId: postCategoryLogoByCategoryId
      tags:
        - Category
      description: |
        upload a new logo the list of logos of a category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Access denied not authorized
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileData'
  '/categories/{id}/logos/{logoId}':
    x-swagger-router-controller: category
    put:
      operationId: selectCategoryLogoByLogoId
      tags:
        - Category
      description: |
        mark the logo as selected, meaning that this logo is displayed in the UI
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: logoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Access denied not authorized
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteCategoryLogoByLogoId
      tags:
        - Category
      description: >
        remove the logo from the uploaded logo files

        if it is already selected, then nullifies the selection from the
        configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: logoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Access denied not authorized
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
  '/categories/{id}/groups':
    x-swagger-router-controller: category
    get:
      operationId: getInterestGroupsByCategoryId
      security:
        - basicAuth: []
      tags:
        - Category
      description: get the list of Interest groups belonging to one category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
        - name: guest
          in: query
          description: if true use guest user
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InterestGroup'
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
    post:
      operationId: postInterestGroup
      security:
        - basicAuth: []
      tags:
        - Category
      description: |
        create a new Interest group in the category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterestGroup'
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterestGroupPostModel'
  '/categories/{id}/admins':
    get:
      operationId: getCategoryAdministrators
      security:
        - basicAuth: []
      tags:
        - Category
      description: get the list of category administators belonging to one category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
    post:
      operationId: postCategoryAdministartors
      security:
        - basicAuth: []
      tags:
        - Category
      description: add users as category administator
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid ref or invalid ubject
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
  '/categories/{id}/admins/{userId}':
    delete:
      operationId: deleteCategoryAdministartor
      security:
        - basicAuth: []
      tags:
        - Category
      description: remove one category administator belonging to one category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid ref or user id
        '500':
          description: Internal Server Error
  '/categories/{id}/requests/group':
    get:
      operationId: getInterestGroupRequests
      security:
        - basicAuth: []
      tags:
        - Category
      description: |
        the category admin lists all the new Interest group requests.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: filter
          in: query
          description: the type of agreement (waiting / approved / rejected)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedGroupCreationRequests'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid request
        '500':
          description: Internal Server Error
    post:
      operationId: postRequestInterestGroup
      security:
        - basicAuth: []
      tags:
        - Category
      description: |
        user can request the creation of a new Interest group.
        this message will be addressed to the Interest group leaders.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreationRequest'
        required: true
  '/categories/{id}/requests/group/{idRequest}':
    put:
      operationId: editInterestGroupRequest
      security:
        - basicAuth: []
      tags:
        - Category
      description: |
        the category admin edit the new Interest group request.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: idRequest
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreationRequest'
        required: true
  '/categories/{id}/requests/group/{idRequest}/approval':
    post:
      operationId: validateInterestGroupRequests
      security:
        - basicAuth: []
      tags:
        - Category
      description: |
        the category admin refuses or accepts the new Interest group request.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: idRequest
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreationRequestApproval'
        required: true
  '/categories/{id}/contact':
    post:
      operationId: contactCategoryAdmins
      security:
        - basicAuth: []
      tags:
        - Category
      description: |
        the current authenticated user
        can send an email to the category administrators
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminContactRequest'
        required: true
  '/categories/{id}/exported/profiles':
    get:
      operationId: getExportedProfiles
      security:
        - basicAuth: []
      tags:
        - Category
      description: get the list of exported profiles of the IGs in the category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: ignoreIgId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
  '/categories/{id}/statistics':
    get:
      operationId: getCategoryStatistics
      security:
        - basicAuth: []
      tags:
        - Category
      description: get the list of calculated IG statistics
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedStatisticsContents'
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
    post:
      operationId: postCategoryStatistics
      security:
        - basicAuth: []
      tags:
        - Category
      description: calculate current IG statistics
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '405':
          description: Invalid ref
        '500':
          description: Internal Server Error
  /ftp/connection:
    get:
      operationId: testFTPConnectionOnServer
      security:
        - basicAuth: []
      tags:
        - FTP
      description: test the ftp connection given the connection parameters
      parameters:
        - name: host
          in: query
          required: true
          schema:
            type: string
        - name: port
          in: query
          required: true
          schema:
            type: number
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
        - name: filePath
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  /groups/visited:
    get:
      operationId: getVisitedInterestGroups
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: |
        get the list of all visited Interest groups
      parameters:
        - name: amount
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InterestGroup'
  '/groups/{id}':
    x-swagger-router-controller: interest_group
    get:
      operationId: getInterestGroup
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: get the definition and properties of one Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterestGroup'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteInterestGroup
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: delete one Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: purgedata
          in: query
          required: false
          schema:
            type: boolean
        - name: purgelogs
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    put:
      operationId: putInterestGroup
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: Update the properties of an new Interest Group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterestGroup'
        required: true
  '/groups/{id}/summary/structure':
    get:
      operationId: getIGSummaryStructure
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: get the structure of the IG given its node id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IGStructure'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/summary/timeline':
    get:
      operationId: getIGSummaryTimeline
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: get the timeline of the IG given its node id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IGTimelineElement'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/summary/statistics':
    get:
      operationId: getIGSummaryStatistics
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: get the statistics of the IG given its node id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: calculate
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NameValue'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/summary/export':
    get:
      operationId: getIGSummaryExport
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: 'export the summary of an Interest group as XML, XLS or CSV'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - statistics
              - timeline
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum:
              - csv
              - xls
              - xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/autoupload':
    get:
      operationId: getAutoUploadEntry
      security:
        - basicAuth: []
      tags:
        - AutoUpload
      description: get the autoupload entry for the given node id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: nodeId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutoUploadConfiguration'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteAutoUploadEntry
      security:
        - basicAuth: []
      tags:
        - AutoUpload
      description: delete the autoupload entry for the given configuration id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: configurationId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    post:
      operationId: postAutoUploadEntry
      security:
        - basicAuth: []
      tags:
        - AutoUpload
      description: add a new autoupload entry for the given configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoUploadConfiguration'
        required: true
    put:
      operationId: putAutoUploadEntry
      security:
        - basicAuth: []
      tags:
        - AutoUpload
      description: enable/disable the given autoupload entry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: configurationId
          in: query
          required: true
          schema:
            type: string
        - name: enable
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/autouploads':
    get:
      operationId: getAutoUploadEntries
      security:
        - basicAuth: []
      tags:
        - AutoUpload
      description: get the autoupload entries of the given group id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedAutoUploadConfiguration'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/configuration':
    x-swagger-router-controller: interest_group
    get:
      operationId: getGroupConfiguration
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: >
        get the configuration of the Interest group and its services
        if there is not any configuration ready for the Interest Group, it
        should return default parameters
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupConfiguration'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    put:
      operationId: putGroupConfiguration
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: updates the confiration of the Interest group and its services
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupConfiguration'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupConfiguration'
        required: true
  '/check/deletion/groups/{id}':
    get:
      operationId: isGroupDeletable
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: |
        get the answer if a group can be deleted
        returns if groups has locked documents, shared spaces or shared profiles.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDeletionReport'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/members':
    get:
      operationId: getMembers
      security:
        - basicAuth: []
      tags:
        - Members
      description: get the members of an Interest group with their respective profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: profile
          in: query
          description: filters the members with one or more profile
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: order
          in: query
          description: the column name on which a sorting applies  - for DESC and + for ASC
          required: false
          schema:
            type: string
        - name: searchQuery
          in: query
          description: query to search users or profiles by their name or text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedUserProfile'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    post:
      operationId: postMember
      security:
        - basicAuth: []
      tags:
        - Members
      description: invite new user in the group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: id of interest group
        - name: expirationDate
          in: query
          required: false
          schema:
            type: string
            format: dateTime
          description: date and time  whenn membership will expire
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/MembershipPostDefinition'
    put:
      operationId: putMember
      security:
        - basicAuth: []
      tags:
        - Members
      description: >
        update the profile of users in the group or expiration date of user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: id of interest group
        - name: expirationDate
          in: query
          required: false
          schema:
            type: string
            format: dateTime
          description: date and time  when membership will expire
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/MembershipPostDefinition'
  '/groups/{id}/members/count':
    get:
      operationId: getMemberCount
      security:
        - basicAuth: []
      tags:
        - Members
      description: count the members of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberCount'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/members/export':
    get:
      operationId: getMemberExport
      security:
        - basicAuth: []
      tags:
        - Members
      description: 'export the members of an Interest group as XML, XLS or CSV'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum:
              - csv
              - xls
              - xml
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/members/{userId}':
    delete:
      operationId: deleteMember
      security:
        - basicAuth: []
      tags:
        - Members
      description: remove one user from the members of one Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/members/{userId}/expiration':
    post:
      operationId: createMemberExpiration
      security:
        - basicAuth: []
      tags:
        - Members
      description: create expiration date of one user from the members of one Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: expirationDate
          in: query
          required: true
          schema:
            type: string
            format: dateTime
          description: date and time  when membership will expire
        - name: profileId
          in: query
          required: true
          schema:
            type: string
        - name: alfrescoGroup
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteMemberExpiration
      security:
        - basicAuth: []
      tags:
        - Members
      description: remove expiration date of one user from the members of one Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    put:
      operationId: updateMemberExpiration
      security:
        - basicAuth: []
      tags:
        - Members
      description: update expiration date of one user from the members of one Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: expirationDate
          in: query
          required: true
          schema:
            type: string
            format: dateTime
          description: date and time  when membership will expire
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/{id}/members/applicants':
    get:
      operationId: getApplicant
      security:
        - basicAuth: []
      tags:
        - Members
      description: get the membership requests of an Interest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Applicant'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    post:
      operationId: postApplicant
      security:
        - basicAuth: []
      tags:
        - Members
      description: used to submit a new application for memebership
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/ApplicantAction'
    put:
      operationId: putApplicant
      security:
        - basicAuth: []
      tags:
        - Members
      description: >
        used to decline or accept a member applicant

        it does not invite the user , it's only updating the applicant in the IG
        node property
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: action
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/ApplicantAction'
  '/groups/{id}/profiles':
    get:
      operationId: getProfiles
      security:
        - basicAuth: []
      tags:
        - Profile
      description: get the list of profile definitions of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
        - name: searchQuery
          in: query
          required: false
          schema:
            type: string
        - name: nonEmptyProfiles
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
    post:
      operationId: postProfile
      security:
        - basicAuth: []
      tags:
        - Profile
      description: creates a new profile definition of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Profile'
  '/groups/{id}/imported/profiles':
    post:
      operationId: postImportedProfile
      security:
        - basicAuth: []
      tags:
        - Profile
      description: creates a new imported profile definition in an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Profile'
  '/groups/{id}/keywords':
    get:
      operationId: getKeywordDefinitions
      security:
        - basicAuth: []
      tags:
        - Keywords
      description: get the list of keyword definition of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeywordDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    post:
      operationId: postKeywordDefinition
      security:
        - basicAuth: []
      tags:
        - Keywords
      description: create a new keyword definition in an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeywordDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/KeywordDefinition'
  '/groups/{id}/keywords/bulk':
    get:
      operationId: getBulkKeywordDefinitions
      security:
        - basicAuth: []
      tags:
        - Keywords
      description: >-
        get the list of keyword definition of an Interest group, but in Excel
        format
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    post:
      operationId: postBulkKeywordDefinitions
      security:
        - basicAuth: []
      tags:
        - Keywords
      description: import the list of keyword definition of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileData'
  '/groups/{id}/events':
    get:
      operationId: getInterestGroupEvents
      security:
        - basicAuth: []
      tags:
        - Events
      description: |
        get the events of one Interest group between the given date range
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventItemDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postEvent
      security:
        - basicAuth: []
      tags:
        - Events
      description: |
        create a new event within the Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/EventDefinition'
  '/groups/{id}/events/list':
    get:
      operationId: getInterestGroupListEvents
      security:
        - basicAuth: []
      tags:
        - Events
      description: |
        get the events of one Interest group given a filter
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          required: true
          schema:
            type: string
            enum:
              - Exact
              - Future
              - Previous
        - name: exactDate
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default), 0 (all) or any other value > 0
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: sort
          in: query
          description: the field to sort (_ASC or _DESC)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedEventItemDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/groups/{id}/events/export':
    get:
      operationId: getEventsExport
      security:
        - basicAuth: []
      tags:
        - Events
      description: >
        export the events of one Interest group given a filter and an export
        format
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: filter
          in: query
          required: true
          schema:
            type: string
            enum:
              - Exact
              - Future
              - Previous
        - name: exactDate
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: format
          in: query
          required: true
          schema:
            type: string
            enum:
              - csv
              - xls
              - xml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/groups/{id}/dashboard':
    x-swagger-router-controller: groupDashboard
    get:
      operationId: getGroupDashboard
      security:
        - basicAuth: []
      tags:
        - Dashboard
      description: >
        get the events and the calendar object of one Interest group

        if the parameter month is selected, then it return the calendar object
        for the specified month

        else it returns for the current month

        all items are filtered depending on the user's permissions

        !!! TODO !!!

        How to implement lazy loading with this object and the methods behind
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDashboard'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/groups/{id}/dashboard/discussions':
    x-swagger-router-controller: groupDashboard
    get:
      operationId: getGroupRecentDiscussions
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: >
        get the recent discussions held inside the Interest group library or
        forums
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecentDiscussion'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/groups/{id}/information':
    get:
      operationId: getInformationDefinitions
      security:
        - basicAuth: []
      tags:
        - Information
      description: >
        get the information service definition

        to be review in the future when the new version of the Information will
        be implemented
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InformationPage'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putInformationDefinitions
      security:
        - basicAuth: []
      tags:
        - Information
      description: |
        update the information service definition
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InformationPage'
        required: true
  '/groups/{id}/information/news':
    get:
      operationId: getInformationNews
      security:
        - basicAuth: []
      tags:
        - Information
      description: |
        get the list of news for the information service
        pagination applies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedNews'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postInformationNews
      security:
        - basicAuth: []
      tags:
        - Information
      description: |
        add to the list of news a new entry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/News'
  '/groups/{id}/logos':
    get:
      operationId: getGroupLogos
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: |
        get the list of uploaded logos for the Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postGroupNewLogo
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: |
        upload a new logo in the list of logos for the Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileData'
  '/groups/{id}/logos/{logoId}':
    put:
      operationId: selectGroupLogo
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: |
        set a logo as the new selected logo for the Interest group
        if the logo is already selected, it will be unselected
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: logoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteGroupLogo
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: |
        remove a logo from the list of group logos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: logoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/news/{id}':
    put:
      operationId: putNews
      security:
        - basicAuth: []
      tags:
        - Information
      description: |
        update a news
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/News'
    get:
      operationId: getNews
      security:
        - basicAuth: []
      tags:
        - Information
      description: |
        update a news
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteNews
      security:
        - basicAuth: []
      tags:
        - Information
      description: |
        removes from the list of news a news entry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/news/{id}/attachements':
    post:
      operationId: postNewsAttachment
      security:
        - basicAuth: []
      tags:
        - Information
      description: |
        add a file as attachement to a news
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileData'
  '/news/{id}/attachements/{attachmentId}':
    delete:
      operationId: deleteNewsAttachment
      security:
        - basicAuth: []
      tags:
        - Information
      description: |
        remove a file as attachement to a news
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/groups/{id}/documents/deleted':
    get:
      operationId: getDeletedDocuments
      security:
        - basicAuth: []
      tags:
        - Archive
      description: |
        get the deleted documents of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: order
          in: query
          description: the column name on which a sorting applies  - for DESC and + for ASC
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedArchiveNodes'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: restoreDocument
      security:
        - basicAuth: []
      tags:
        - Archive
      description: |
        restore one archived node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreNodeMetadata'
        required: true
  '/groups/{id}/documents/deleted/{nodeId}':
    delete:
      operationId: deleteDeletedDocument
      security:
        - basicAuth: []
      tags:
        - Archive
      description: |
        delete the archived item of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: nodeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/groups/{id}/documents/expired':
    get:
      operationId: getExpiredDocuments
      security:
        - basicAuth: []
      tags:
        - Expired
      description: |
        get the expired documents of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: order
          in: query
          description: the column name on which a sorting applies  - for DESC and + for ASC
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedNodes'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/groups/{id}/dynprops':
    get:
      operationId: getDynamicPropertyDefinitions
      security:
        - basicAuth: []
      tags:
        - DynamicProperties
      description: get the list of dynamic properties definition in an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DynamicPropertyDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    post:
      operationId: postPropertyDefinition
      security:
        - basicAuth: []
      tags:
        - DynamicProperties
      description: |
        create a new dynamic property inside the Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicPropertyDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/DynamicPropertyDefinition'
  '/groups/{id}/email':
    post:
      operationId: postGroupEmail
      security:
        - basicAuth: []
      tags:
        - Email
      description: |
        use this method to send an email to the users of the Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/EmailDefinition'
  '/groups/{id}/email/leaders':
    post:
      operationId: contactLeadersByEmail
      security:
        - basicAuth: []
      tags:
        - Email
      description: >
        use this method to send an email to the leaders of the Interest group

        the only required parameter is the group id and the content of the
        message, as the REST

        api will take care of retrieving the list of leaders
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/contactLeadersByEmailBody'
  '/groups/{id}/path':
    get:
      operationId: getGroupPath
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: |
        get the path of the Interest group header / category and group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPath'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error'
  '/groups/{id}/repositories':
    get:
      operationId: getExternalRepositories
      security:
        - basicAuth: []
      tags:
        - ExternalRepository
      description: get list of external repositories for given interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepositoryConfiguration'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
  '/groups/{id}/repositories/{repoId}':
    get:
      operationId: getExternalRepositoryGroupLog
      security:
        - basicAuth: []
      tags:
        - ExternalRepository
      description: get external repository audit for given interest group and given repository
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: repoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalRepositoryData'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    post:
      operationId: addExternalRepositories
      security:
        - basicAuth: []
      tags:
        - ExternalRepository
      description: add (enable) external repositories for given interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: repoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryConfiguration'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteExternalRepository
      security:
        - basicAuth: []
      tags:
        - ExternalRepository
      description: remove (disable) external repositories for given interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: repoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
  '/nodes/{id}/repositories/{repoId}':
    get:
      operationId: getExternalRepositoryNodeLog
      security:
        - basicAuth: []
      tags:
        - ExternalRepository
      description: get external repository audit for given node and given repository
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: repoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalRepositoryData'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
  /groups/email/templates:
    get:
      operationId: getUserMailTemplates
      security:
        - basicAuth: []
      tags:
        - Email
      description: get the list of mail templates created by the current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MailTemplateDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    put:
      operationId: saveUserMailTemplate
      security:
        - basicAuth: []
      tags:
        - Email
      description: >
        save the current email template in the current user's email template
        space
      parameters:
        - name: templateName
          in: query
          required: true
          schema:
            type: string
        - name: templateSubject
          in: query
          required: true
          schema:
            type: string
        - name: templateText
          in: query
          required: true
          schema:
            type: string
        - name: overwrite
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailTemplateId'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteUserMailTemplates
      security:
        - basicAuth: []
      tags:
        - Email
      description: >
        delete the given email template(s) from the current user's email
        template space
      parameters:
        - name: templateIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
  /groups/import/template:
    get:
      operationId: getImportTemplate
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: generate the index file template for the import operation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/groups/import/{folderId}':
    post:
      operationId: postImportZipFile
      security:
        - basicAuth: []
      tags:
        - InterestGroup
      description: |
        import a zip or acp file inside the folder with the given folderId
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: string
        - name: notifyUser
          in: query
          required: true
          schema:
            type: boolean
        - name: deleteFile
          in: query
          required: true
          schema:
            type: boolean
        - name: disableNotification
          in: query
          required: true
          schema:
            type: boolean
        - name: encoding
          in: query
          required: true
          schema:
            type: string
            enum:
              - CP437
              - UTF-8
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileData'
  '/profiles/{id}':
    put:
      operationId: putProfile
      security:
        - basicAuth: []
      tags:
        - Profile
      description: update a profile definition of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Profile'
    delete:
      operationId: deleteProfile
      security:
        - basicAuth: []
      tags:
        - Profile
      description: delete a profile definition of an Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/keywords/{keywordId}':
    put:
      operationId: putKeywordDefinition
      security:
        - basicAuth: []
      tags:
        - Keywords
      description: updates a keyword definition in an Interest group
      parameters:
        - name: keywordId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeywordDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/KeywordDefinition'
    delete:
      operationId: deleteKeywordDefinition
      security:
        - basicAuth: []
      tags:
        - Keywords
      description: deletes a keyword definition in an Interest group
      parameters:
        - name: keywordId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
  '/dynprops/{id}':
    get:
      operationId: getDynamicPropertyDefinition
      security:
        - basicAuth: []
      tags:
        - DynamicProperties
      description: get one dynamic property from the Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicPropertyDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteDynamicPropertyDefinition
      security:
        - basicAuth: []
      tags:
        - DynamicProperties
      description: remove one dynamic property from the Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicPropertyDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    put:
      operationId: putDynamicPropertyDefinition
      security:
        - basicAuth: []
      tags:
        - DynamicProperties
      description: |
        update a dynamic property inside the Interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicPropertyDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/DynamicPropertyDefinition'
  /users:
    get:
      operationId: getUsers
      security:
        - basicAuth: []
      tags:
        - User
      description: >
        Retrieve the list of users / Alfresco accounts
        If query parameter is provided, then the list will only return the list
        based on the query parameter
        If filter true it will prefilter users
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: filter
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
    post:
      operationId: postUser
      security:
        - basicAuth: []
      tags:
        - User
      description: creates a new user / alfresco account
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostDefinition'
  /users/bulkinvite/template:
    get:
      operationId: getBulkInviteTemplate
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        Download the bulk invite template
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
  /users/bulkinvite/categories:
    get:
      operationId: getBulkInviteCategories
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        Get the categories for user to bulk invite
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
  /users/bulkinvite/igs:
    get:
      operationId: getBulkInviteIGs
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        get the interest groups for user to bulk invite
      parameters:
        - name: categoryId
          in: query
          required: true
          schema:
            type: string
        - name: igId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IGData'
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
  /users/bulkinvite/members:
    get:
      operationId: getBulkInviteMembers
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        get the members from the IGs to bulk invite
      parameters:
        - name: igIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
        - name: destinationIGId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkImportUserData'
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
    post:
      operationId: bulkInviteUsers
      security:
        - basicAuth: []
      tags:
        - User
      description: >
        invites the provider users list in bulk and creates (or not) the
        necessary profiles
      parameters:
        - name: igId
          in: query
          required: true
          schema:
            type: string
        - name: createNewProfiles
          in: query
          required: false
          schema:
            type: boolean
        - name: notifyUsers
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkInviteData'
        required: true
    put:
      operationId: bulkInviteUsersDigestFile
      security:
        - basicAuth: []
      tags:
        - User
      description: >
        processes a given XLS, CSV or XML file with the bulk invite template format and returns
        the validated user information to bulk-invite the users
      parameters:
        - name: igId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulkImportUserData'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileData'
        required: true
  '/users/{userId}':
    get:
      operationId: getUser
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        Retrieve one user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteUser
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        Delete one user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putUser
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        Update one user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
  '/users/{userId}/db':
    get:
      operationId: getUserFromDB
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        retrieve user details from the user db
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
  '/users/{userId}/avatar':
    delete:
      operationId: deleteAvatar
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        Delete the users avatar
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putAvatar
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        Update the users avatar
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileData'
  '/users/{userId}/memberships':
    x-swagger-router-controller: user
    get:
      operationId: getUserMembership
      security:
        - basicAuth: []
      tags:
        - User
      description: >
        retrieve the list of all the membership of one user

        language parameter to be used for the profiles and the Interest Groups
        titles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
        - name: lightMode
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InterestGroupProfile'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/users/{userId}/categories':
    x-swagger-router-controller: user
    get:
      operationId: getUserCategories
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        retrieve the list of all the categories where one user is admin
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/users/{userId}/dashboard/downloads':
    get:
      operationId: getUserDownloads
      security:
        - basicAuth: []
      tags:
        - Dashboard
      description: |
        retrieve the last max 10 downloads of a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserActionLog'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/users/{userId}/dashboard/uploads':
    get:
      operationId: getUserUploads
      security:
        - basicAuth: []
      tags:
        - Dashboard
      description: |
        retrieve the last max 10 uploads of a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserActionLog'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/users/{userId}/dashboard/newsfeed':
    get:
      operationId: getUserNewsFeed
      security:
        - basicAuth: []
      tags:
        - Dashboard
      description: |
        retrieve the news feed of a user
        it list the recently uploaded or modified files, etc.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: when
          in: query
          required: false
          description: valid values are today/week/previousWeek
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNewsFeed'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/users/{userId}/events':
    get:
      operationId: getUserEvents
      security:
        - basicAuth: []
      tags:
        - User
      description: >
        retrieve the list of events/meetings related to one user given a date
        range
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventItemDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postUserEvent
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        accepts or rejects a meeting request for the given user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: meetingId
          in: query
          required: true
          schema:
            type: string
        - name: action
          in: query
          required: true
          schema:
            type: string
            enum:
              - Accepted
              - Rejected
        - name: updateMode
          in: query
          required: true
          schema:
            type: string
            enum:
              - Single
              - AllOccurences
              - FuturOccurences
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/users/{userId}/events/period':
    get:
      operationId: getUserEventsPeriod
      security:
        - basicAuth: []
      tags:
        - User
      description: >
        retrieve the list of events/meetings of a given user respect to a period
        (previous, exact, future)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: exactDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: period
          in: query
          required: true
          schema:
            type: string
            enum:
              - Previous
              - Exact
              - Future
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventItemDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/users/{userId}/favourites':
    get:
      operationId: getFavourites
      security:
        - basicAuth: []
      tags:
        - Favourites
      description: |
        retrieve the list of favourites related to one user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedNodes'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postFavourite
      security:
        - basicAuth: []
      tags:
        - Favourites
      description: |
        add a new favourite to the list of favourites related to one user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleId'
        required: true
  '/users/{userId}/favourites/{nodeId}':
    delete:
      operationId: deleteFavourite
      security:
        - basicAuth: []
      tags:
        - Favourites
      description: |
        removes from the list of favourites related to one user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: nodeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/users/{userId}/preferences':
    get:
      operationId: getUserPreferences
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        retrieve the list of all the configurations for a user account
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceConfiguration'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: saveUserPreferences
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        save the list of all the configurations for a user account
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferenceConfiguration'
  '/users/retrieval':
    post:
      operationId: getUsersFromList
      security:
        - basicAuth: []
      tags:
        - User
      description: |
        Retrieve users based on an Excel file (userid or email)
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/vnd.ms-excel:
            schema:
              type: string
              format: binary
        required: true
  '/spaces/{id}':
    get:
      operationId: getSpace
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        get the details of a space,
        can be used for both the Information Service and the Library
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteSpace
      security:
        - basicAuth: []
      tags:
        - Space
      description: delete the referenced space/folder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putSpace
      security:
        - basicAuth: []
      tags:
        - Space
      description: update the details of a space
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '409':
          description: duplicate node name
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Node'
  '/spaces/{id}/children':
    x-swagger-router-controller: library
    get:
      operationId: getChildren
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        get the content of a space
        returns a list of space/files/urls or any kind of child of this node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          description: >-
            Langauage code for example en,fr,de... ,if specify filter filter
            multilingual documents and multilingual properties
          in: query
          required: false
          schema:
            type: string
        - name: guest
          in: query
          description: if true use guest user
          required: false
          schema:
            type: boolean
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: order
          in: query
          description: the column name on which a sorting applies  - for DESC and + for ASC
          required: false
          schema:
            type: string
        - name: folderOnly
          in: query
          description: |
            if true, it only search for spaces
            this is used mainly for space picker
          required: false
          schema:
            type: boolean
        - name: fileOnly
          in: query
          description: |
            if true, it only search for files
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedNodes'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/spaces/{id}/url':
    post:
      operationId: postURL
      security:
        - basicAuth: []
      tags:
        - Space
      description: creates a new link within the current visited space/folder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: |
            Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Node'
  '/spaces/{id}/subspaces':
    get:
      operationId: getSubspaces
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        get the subspaces of the immediate level below of the given space
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
        - name: sort
          description: sort by name / modified / title if enabled
          in: query
          required: false
          schema:
            type: string
        - name: order
          description: ASC or DESC
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postSubspace
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        get the details of a space,
        can be used for both the Information Service and the Library
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Node'
  '/spaces/{id}/shares':
    get:
      operationId: getShareSpaces
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        get the shares of the given space
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default), 0 (all) or any other value > 0
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedShares'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postShareSpace
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        add a new share for the given space
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: notifyLeaders
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Share'
        required: true
    put:
      operationId: putShareSpacePermissionUpdate
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        update the permission of a share for the given space
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: igId
          in: query
          required: true
          schema:
            type: string
        - name: permission
          in: query
          required: true
          schema:
            type: string
        - name: notifyLeaders
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteShareSpace
      security:
        - basicAuth: []
      tags:
        - Space
      description: remove the given share from the space
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: sharedIGId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/spaces/{id}/exportedshares':
    get:
      operationId: getExportedSharedSpaces
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        get the shares that are available
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShareSpaceItem'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postExportedSharedSpace
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        create a new space based on a shared space link
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: parentId
          in: query
          required: true
          schema:
            type: string
        - name: title
          in: query
          required: true
          schema:
            type: string
        - name: description
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/spaces/{id}/folderSize':
    get:
      operationId: getFolderSize
      security:
        - basicAuth: []
      tags:
        - Space
      description: |
        get the folder size(with all the children underneath) matching the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/spaces/{id}/toshare':
    get:
      operationId: getShareIGsAndPermissions
      security:
        - basicAuth: []
      tags:
        - Space
      description: >
        get the IGs and permission that can be shared with this space (to build
        the shares)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareIGsAndPermissions'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/content/{id}':
    get:
      operationId: getContent
      security:
        - basicAuth: []
      tags:
        - Content
      description: get the details of a content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteContent
      security:
        - basicAuth: []
      tags:
        - Content
      description: delete one content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putContent
      security:
        - basicAuth: []
      tags:
        - Content
      description: change properties of a content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '409':
          description: Duplicate node name
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Node'
  '/content/{id}/check':
    post:
      operationId: postCheckout
      security:
        - basicAuth: []
      tags:
        - Content
      description: checkout - checks the given item out (given the id)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: editInline
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleId'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putCheckin
      security:
        - basicAuth: []
      tags:
        - Content
      description: >-
        checkin - checks the given item in (given the id of the original
        document) - minorChange and keepCheckedOut default to false
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: comment
          in: query
          required: false
          schema:
            type: string
        - name: minorChange
          in: query
          required: false
          schema:
            type: boolean
        - name: keepCheckedOut
          in: query
          required: false
          schema:
            type: boolean
        - name: endEditInline
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteCheckout
      security:
        - basicAuth: []
      tags:
        - Content
      description: >-
        cancel checkout - cancels the checkout of the given item (given the id
        of the original document)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/content/{id}/check/preview':
    get:
      operationId: getCheckPreview
      security:
        - basicAuth: []
      tags:
        - Content
      description: |
        check if the node with the given id is ready to be previewed
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewResult'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  /content/check/office:
    get:
      operationId: getCheckOffice
      security:
        - basicAuth: []
      tags:
        - Content
      description: >
        check if the node with the given id can be edited in office (checks
        type, permissions, state, etc.)
      parameters:
        - name: nodeIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfficeEditResult'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/content/{id}/update':
    post:
      operationId: postContentUpdate
      security:
        - basicAuth: []
      tags:
        - Content
      description: >-
        Updates the content of a working copy that has already been checked out
        without checking it in
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileData'
  '/content/{id}/versions/first/ten':
    get:
      operationId: getFirstVersions
      security:
        - basicAuth: []
      tags:
        - Content
      description: |
        get the first ten Versions of a node (space/content) (less if < 10)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Version'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/content/{id}/versions':
    get:
      operationId: getVersions
      security:
        - basicAuth: []
      tags:
        - Content
      description: |
        get the Versions of a node (space/content)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Version'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postVersion
      security:
        - basicAuth: []
      tags:
        - Content
      description: |
        create a new Versions of a node (content)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Version'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Version'
        required: true
  '/content/{id}/versions/{versionLabel}':
    get:
      operationId: getVersionByLabel
      security:
        - basicAuth: []
      tags:
        - Content
      description: |
        get the specific Version of a node with its version label
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: versionLabel
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/content/{id}/machinetranslation/{language}':
    post:
      operationId: postMachineTranslation
      security:
        - basicAuth: []
      tags:
        - Translations
      description: |
        create request for machine translation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: path
          required: true
          schema:
            type: string
        - name: notify
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Translations'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/content/{id}/translations':
    get:
      operationId: getTranslations
      security:
        - basicAuth: []
      tags:
        - Content
      description: |
        get the translations of a node content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Translations'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postTranslation
      security:
        - basicAuth: []
      tags:
        - Translations
      description: |
        create a new translation of a  node (content)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Translations'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TranslationFileData'
  '/content/{id}/translations/enhanced':
    post:
      operationId: postTranslationEnhanced
      security:
        - basicAuth: []
      tags:
        - Translations
      description: |
        create a new translation of a  node (content)
        this does not fire any upload notification
        you must call "fireNewContentNotification"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: notify
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Translations'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                title:
                  type: object
                  properties:
                    en:
                      type: string
                description:
                  type: object
                  properties:
                    en:
                      type: string
                keywords:
                  type: array
                  items:
                    type: string
                author:
                  type: string
                reference:
                  type: string
                expirationDate:
                  type: string
                  format: date
                securityRanking:
                  type: string
                status:
                  type: string
                lang:
                  type: string
                dynamicProperties:
                  type: object
                  properties:
                    dynAttr1:
                      type: string
                file:
                  type: string
                  format: binary
  '/content/{id}/multilingual/aspect':
    post:
      operationId: postMultilingualAspect
      security:
        - basicAuth: []
      tags:
        - Content
      description: >
        This is used to manage the multingual aspect of one content inside the
        Library

        On first hand it is used to enable multilingual aspect of a document.

        Once done, we can use the /edition to create a new edition of
        translations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultilingualAspectMetadata'
  '/content/{id}/multilingual/editions':
    post:
      operationId: postMultilingualEdition
      security:
        - basicAuth: []
      tags:
        - Content
      description: >
        This is used to manage the multingual aspect of one content inside the
        Library

        it is used to create a new edition of translations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultilingualEditionMetadata'
  '/content/{id}/topics':
    get:
      operationId: getTopics
      security:
        - basicAuth: []
      tags:
        - Content
      description: |
        get the topics of a node content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postTopic
      security:
        - basicAuth: []
      tags:
        - Content
      description: |
        create a new topic thread of a node content
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Node'
  '/content/{id}/email':
    post:
      operationId: postContentEmail
      security:
        - basicAuth: []
      tags:
        - Content
      description: >
        email this content node to the user with the given id. If userId is not
        provided, it emails to the current authenticated user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  /content/bulk:
    get:
      operationId: getBulk
      security:
        - basicAuth: []
      tags:
        - Content
      description: |
        bulk download a set of files as a zip archive
      parameters:
        - name: nodeIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: string
                format: binary
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  /contents/email:
    post:
      operationId: postContentsEmail
      security:
        - basicAuth: []
      tags:
        - Content
      description: >
        email this content zip file link to the user with the given id. If
        userId is not provided, it emails to the current authenticated user
      parameters:
        - name: parentId
          in: query
          required: true
          schema:
            type: string
        - name: nodeIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
        - name: userId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/audit/{id}':
    get:
      operationId: getAudits
      security:
        - basicAuth: []
      tags:
        - Audit
      description: |
        get the actions done on interest group or category or circabc
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: query
          required: false
          schema:
            type: string
        - name: service
          in: query
          required: false
          schema:
            type: string
        - name: activity
          in: query
          required: false
          schema:
            type: string
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: format
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogSearchResult'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/audit/{id}/history':
    get:
      operationId: getHistory
      security:
        - basicAuth: []
      tags:
        - Audit
      description: |
        get the history of an item (document, event. etc.) given its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default), 0 (all) or any other value > 0
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedLogSearchResult'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/audit/{id}/activities':
    get:
      operationId: getAllAuditActivities
      description: get all audit activities
      tags:
        - Audit
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search successfull
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditActivity'
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/forums/{id}':
    get:
      operationId: getForum
      security:
        - basicAuth: []
      tags:
        - Forum
      description: get the details of a forum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteForum
      security:
        - basicAuth: []
      tags:
        - Forum
      description: delete a forum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putForum
      security:
        - basicAuth: []
      tags:
        - Forum
      description: update a forum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Node'
  '/forums/{id}/moderation':
    put:
      operationId: putModeration
      security:
        - basicAuth: []
      tags:
        - Forum
      description: >
        toggle the moderation of a forum. acceptAll is only considered if
        moderation is being

        disabled and it concerns accepting of refusing all posts to be still
        checked
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: enable
          in: query
          required: true
          schema:
            type: boolean
        - name: acceptAll
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/forums/{id}/content':
    x-swagger-router-controller: forums
    get:
      operationId: getForumContent
      security:
        - basicAuth: []
      tags:
        - Forum
      description: |
        get the content of a forums
        returns a list of forums/topics or any kind of child of this node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postForumContent
      security:
        - basicAuth: []
      tags:
        - Forum
      description: |
        create a new topic / forum within one forum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Node'
  '/forums/{id}/subforums':
    x-swagger-router-controller: forums
    post:
      operationId: postSubforums
      security:
        - basicAuth: []
      tags:
        - Forum
      description: |
        create a new forum within one forum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Node'
    get:
      operationId: getSubforums
      security:
        - basicAuth: []
      tags:
        - Forum
      description: |
        get all sub forums in a forum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: sort
          description: filter by name / title / modified
          in: query
          required: false
          schema:
            type: string
        - name: order
          description: order by DESC or ASC
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/topics/{id}':
    get:
      operationId: getTopic
      security:
        - basicAuth: []
      tags:
        - Topic
      description: |
        get the  definitions of a topic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteTopic
      security:
        - basicAuth: []
      tags:
        - Topic
      description: |
        delete a topic from the application
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putTopic
      security:
        - basicAuth: []
      tags:
        - Topic
      description: update a topic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/Node'
  '/topics/{id}/replies':
    x-swagger-router-controller: forums
    get:
      operationId: getReplies
      security:
        - basicAuth: []
      tags:
        - Topic
      description: |
        get the replies of a topic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: order
          in: query
          description: the column name on which a sorting applies  - for DESC and + for ASC
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedNodes'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postReply
      security:
        - basicAuth: []
      tags:
        - Topic
      description: |
        create a reply in a topic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                comment:
                  $ref: '#/components/schemas/Comment'
                filesToAdd:
                  type: array
                  items:
                    type: string
                    format: binary
                linksToAdd:
                  type: array
                  items:
                    type: string
        required: true
  '/posts/{id}':
    get:
      operationId: getPost
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        get the information related to a post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deletePost
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        remove a post from the application
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putPost
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        update a post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                post:
                  $ref: '#/components/schemas/Node'
                filesToAdd:
                  type: array
                  items:
                    type: string
                    format: binary
                linksToAdd:
                  type: array
                  items:
                    type: string
                attachmentsToDelete:
                  type: array
                  items:
                    type: string
        required: true
  '/posts/{id}/verify':
    put:
      operationId: putVerify
      security:
        - basicAuth: []
      tags:
        - Post
      description: >
        verify a post by a moderator and accept or reject it (with an optional
        reason)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: approve
          in: query
          required: true
          schema:
            type: boolean
        - name: rejectReason
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/posts/{id}/attachment/file':
    post:
      operationId: addFileAttachment
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        add an attachment to the post with the given id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileData'
  '/posts/{id}/attachment/link/{destinationId}':
    post:
      operationId: addLinkAttachment
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        add a link attachment with destinationId to the post with the given id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: destinationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/posts/{id}/attachment/size':
    get:
      operationId: getAttachmentsRemainingSize
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        gets the remaining size in bytes of attachments of a post given its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentsRemainingSize'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/posts/{id}/attachment/{attachmentId}':
    delete:
      operationId: deleteAttachment
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        deletes the attachment from the post given their ids (hidden content)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/posts/{id}/abuse':
    get:
      operationId: getAbuses
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        get signaled abuses
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AbuseReport'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postAbuse
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        signal an abuse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: abuseText
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteAbuse
      security:
        - basicAuth: []
      tags:
        - Post
      description: |
        remove signaled abuses
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/events/{id}':
    get:
      operationId: getEvent
      security:
        - basicAuth: []
      tags:
        - Events
      description: |
        get the details of an event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putEvent
      security:
        - basicAuth: []
      tags:
        - Events
      description: |
        replaces an event within the interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: updateInfo
          in: query
          required: true
          schema:
            type: string
            enum:
              - GeneralInformation
              - ContactInformation
              - Audience
              - RelevantSpace
              - All
        - name: updateMode
          in: query
          required: true
          schema:
            type: string
            enum:
              - Single
              - AllOccurences
              - FuturOccurences
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/EventDefinition'
    delete:
      operationId: deleteEvent
      security:
        - basicAuth: []
      tags:
        - Events
      description: |
        deletes an event within the interest group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: updateMode
          in: query
          required: true
          schema:
            type: string
            enum:
              - Single
              - AllOccurences
              - FuturOccurences
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}':
    x-swagger-router-controller: nodes
    get:
      operationId: getNode
      security:
        - basicAuth: []
      tags:
        - Nodes
      description: |
        get the properties related to one node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '404':
          description: Not Found
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/path':
    x-swagger-router-controller: nodes
    get:
      operationId: getPath
      security:
        - basicAuth: []
      tags:
        - Nodes
      description: |
        get the path related to one node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/group':
    get:
      operationId: getGroup
      security:
        - basicAuth: []
      tags:
        - Nodes
      description: |
        get the groupId of the node (used when building a route to the node)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterestGroup'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/keywords':
    get:
      operationId: getKeywords
      security:
        - basicAuth: []
      tags:
        - Keywords
      description: |
        get the keywords / tags related to one node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeywordDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postKeyword
      security:
        - basicAuth: []
      tags:
        - Keywords
      description: |
        add a new keyword to a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/KeywordDefinition'
  '/nodes/{id}/keywords/{keywordId}':
    delete:
      operationId: deleteKeyword
      security:
        - basicAuth: []
      tags:
        - Keywords
      description: |
        remove the keyword / tag related to one node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: keywordId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/ownership':
    put:
      operationId: putOwnership
      security:
        - basicAuth: []
      tags:
        - Nodes
      description: |
        update the ownership of the node with the current authenticated user
        no parameter is required, because the Alf ticket will be used
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/paste':
    post:
      operationId: postPaste
      security:
        - basicAuth: []
      tags:
        - Nodes
      description: |
        paste the nodes given by nodeIds to the folder with id given in the path
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: nodeIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putPaste
      security:
        - basicAuth: []
      tags:
        - Nodes
      description: >
        paste the nodes given by nodeIds by moving them into the folder with id
        given in the path
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: nodeIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/link':
    post:
      operationId: postLink
      security:
        - basicAuth: []
      tags:
        - Nodes
      description: >
        paste the nodes given by nodeIds as links into the folder with id given
        in the path
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: nodeIds
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/permissions':
    get:
      operationId: getPermissions
      security:
        - basicAuth: []
      tags:
        - Permission
      description: |
        get the permission definitions of a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    put:
      operationId: putPermission
      security:
        - basicAuth: []
      tags:
        - Permission
      description: |
        update the permission definitions of a node
        change its inheritance
        or all the permissions beneath
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionDefinition'
        required: true
  '/nodes/{id}/permissions/{authority}/{permission}':
    delete:
      operationId: deletePermission
      security:
        - basicAuth: []
      tags:
        - Permission
      description: |
        delete the permission of an authority on a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: authority
          in: path
          required: true
          schema:
            type: string
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/permissions/{authority}':
    delete:
      operationId: clearPermissions
      security:
        - basicAuth: []
      tags:
        - Permission
      description: |
        delete the permissions of an authority on a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: authority
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/notifications':
    get:
      operationId: getNotifications
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        get the notification definitions of a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postNotification
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        add new the notification definitions on a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDefinition'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationDefinition'
        required: true
  '/nodes/{id}/notifications/status/configurations':
    get:
      operationId: getNotificationConfigurations
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        get the notification configurations of a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: language
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedNotificationConfigurations'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/notifications/status/users/{userId}':
    get:
      operationId: isUserSubscribed
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        check if user is subscribed to notification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscribed'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/notifications/status/users':
    get:
      operationId: getNotificationSubscribedUsers
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        get the nsubscribed users of a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedSubscribedUsers'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/notifications/status':
    post:
      operationId: postNotificationStatus
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        change the notification status of a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: authority
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum:
              - SUBSCRIBED
              - UNSUBSCRIBED
              - INHERITED
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    delete:
      operationId: deleteNotification
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        remove the notification from a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: authority
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/notifications/paste':
    get:
      operationId: getPasteNotifications
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        get the paste notifications status of a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasteNotificationsState'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
    post:
      operationId: postPasteNotifications
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        change the paste notifications status of a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: pasteEnable
          in: query
          required: true
          schema:
            type: boolean
        - name: pasteAllEnable
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/notifications/{authority}':
    put:
      operationId: putNotificationAuthority
      security:
        - basicAuth: []
      tags:
        - Notification
      description: |
        update the notificaiton subscription of a single user to a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: authority
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/contactLeadersByEmailBody'
    delete:
      operationId: deleteNotificationAuthority
      security:
        - basicAuth: []
      tags:
        - Notification
      description: >
        remove the notificaiton subscription of an authority (user or group) to
        a node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: authority
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/nodes/{id}/upload':
    post:
      operationId: uploadFile
      security:
        - basicAuth: []
      tags:
        - File
      description: |
        upload a file, if the target node is not a type folder, it must throw an error
        mut return the create node id
        this does not fire any upload notification
        you must call "fireNewContentNotification"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResult'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                title:
                  type: object
                  properties:
                    en:
                      type: string
                description:
                  type: object
                  properties:
                    en:
                      type: string
                keywords:
                  type: array
                  items:
                    type: string
                author:
                  type: string
                reference:
                  type: string
                expirationDate:
                  type: string
                  format: date
                securityRanking:
                  type: string
                status:
                  type: string
                isPivot:
                  type: boolean
                lang:
                  type: string
                dynamicProperties:
                  type: object
                  properties:
                    dynAttr1:
                      type: string
                fileName:
                  type: string
                  format: binary
  '/login':
    x-swagger-router-controller: authentication
    post:
      operationId: postLogin
      tags:
        - Login
      description: |
        uses the credentials provided by the method and return
        the corresponding alfresco ticket
      responses:
        '200':
          description: authentication successful
          content:
            application/json:
              schema:
                type: string
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/contactLeadersByEmailBody'
  '/login/{ticket}':
    x-swagger-router-controller: authentication
    delete:
      operationId: deleteLogin
      tags:
        - Login
      description: |
        unlog the specified ticket
      parameters:
        - name: ticket
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: loggout successful
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  /search:
    get:
      operationId: getSearch
      description: the search entry point
      tags:
        - Search
      parameters:
        - name: q
          in: query
          required: true
          description: the text used to query in the system
          schema:
            type: string
        - name: node
          in: query
          required: false
          description: the node to which the query is start
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: search successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedSearchNodes'
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/guards/group/{id}':
    get:
      operationId: getGuardGroup
      security:
        - basicAuth: []
      tags:
        - Guards
      description: |
        used to verify if the current authentication can access the IG
        depending on the visibility, etc
      parameters:
        - name: id
          in: path
          required: true
          description: id of the group
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardAuthorization'
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/guards/group/{id}/service/{name}':
    get:
      operationId: getGuardGroupService
      security:
        - basicAuth: []
      tags:
        - Guards
      description: >
        used to verify if the current authentication can access the service of
        the IG

        To be used in the case of the Member service or information service, or
        any future need
      parameters:
        - name: id
          in: path
          required: true
          description: id of the group
          schema:
            type: string
        - name: name
          in: path
          required: true
          description: serviceName of the group
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardAuthorization'
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/guards/group/{id}/service/members/admin':
    get:
      operationId: getGuardGroupMembersAdmin
      security:
        - basicAuth: []
      tags:
        - Guards
      description: >
        used to verify if the current authentication can access the service of
        the IG

        verifies if the user is service administrator
      parameters:
        - name: id
          in: path
          required: true
          description: id of the group
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardAuthorization'
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/guards/access/{id}':
    get:
      operationId: getGuardAccess
      security:
        - basicAuth: []
      tags:
        - Guards
      description: |
        used to verify if the current authentication can access the node
      parameters:
        - name: id
          in: path
          required: true
          description: id of the group
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardAuthorization'
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/guards/edition/{id}':
    get:
      operationId: getGuardEdit
      security:
        - basicAuth: []
      tags:
        - Guards
      description: |
        used to verify if the current authentication can edit the node
      parameters:
        - name: id
          in: path
          required: true
          description: id of the group
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardAuthorization'
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/guards/administration/{id}':
    get:
      operationId: getGuardAdmin
      security:
        - basicAuth: []
      tags:
        - Guards
      description: |
        used to verify if the current authentication can administrate the node
      parameters:
        - name: id
          in: path
          required: true
          description: id of the group
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardAuthorization'
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  /email:
    post:
      operationId: postEmail
      security:
        - basicAuth: []
      tags:
        - Email
      description: |
        use this method to send an email to the users
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/EmailDefinition'
  /app/messages:
    get:
      operationId: getEnabledAppMessages
      tags:
        - AppMessage
      description: >
        use this method to get the list of all AppMessage that are configured to
        be shown

        it is used to see if the app has any message enabled
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppMessage'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
  /app/messages/templates:
    get:
      operationId: getPagedAppMessagesTemplate
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: |
        use this method to get the list of all AppMessage templates,
        it is used for the app message management
      parameters:
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedAppMessages'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    post:
      operationId: addAppMessageTemplate
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: |
        use this method to create a new app message template
      parameters:
        - in: query
          name: notification
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppMessage'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/AppMessage'
  '/app/messages/templates/{id}':
    get:
      operationId: getAppMessageTemplate
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: |
        use this method to get the details of an AppMessage template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppMessage'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    put:
      operationId: updateAppMessageTemplate
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: |
        use this method to update the an AppMessage template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - in: query
          name: notification
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppMessage'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/AppMessage'
    delete:
      operationId: deleteAppMessageTemplate
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: |
        use this method to delete an app message template
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
  /app/messages/config:
    put:
      operationId: setDisplayOldMessage
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: >
        use this method to enable / disable the fisplay of the old system
        message

        in the new ui
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/setDisplayOldMessageBody'
    get:
      operationId: getDisplayOldMessage
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: >
        use this method to enable / disable the fisplay of the old system
        message

        in the new ui
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisplayConfiguration'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
  /app/messages/old/config:
    get:
      operationId: getEnableOldMessage
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: >
        use this method to enable / disable the fisplay of the old system
        message

        in the new ui
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnableConfiguration'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    put:
      operationId: setEnableOldMessage
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: |
        use this method to enable / disable the old system message
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/setDisplayOldMessageBody'
  /app/messages/old:
    put:
      operationId: setOldMessage
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: |
        use this method to set the old system message
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/AppMessage'
  '/restricted/spaces/{id}/children':
    x-swagger-router-controller: library
    get:
      operationId: getRestrictedChildren
      security:
        - basicAuth: []
      tags:
        - Space
      description: >
        Used in the case a user is accessing the library with 'No-Access'
        permission

        get the content of a space

        returns a list of space/files/urls or any kind of child of this node
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: language
          description: >-
            Langauage code for example en,fr,de... ,if specify filter filter
            multilingual documents and multilingual properties
          in: query
          required: false
          schema:
            type: string
        - name: guest
          in: query
          description: if true use guest user
          required: false
          schema:
            type: boolean
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: order
          in: query
          description: the column name on which a sorting applies  - for DESC and + for ASC
          required: false
          schema:
            type: string
        - name: folderOnly
          in: query
          description: |
            if true, it only search for spaces
            this is used mainly for space picker
          required: false
          schema:
            type: boolean
        - name: fileOnly
          in: query
          description: |
            if true, it only search for files
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedNodes'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  /app/distribution/emails:
    get:
      operationId: getDistributionEmails
      tags:
        - AppMessage
      description: >
        use this method to get the list of the emails addresses that will
        receive a notification by email when a new app message is displayed
      parameters:
        - name: search
          in: query
          description: search for an email address
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedDistributionMails'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
    post:
      operationId: addDistributionEmails
      tags:
        - AppMessage
      description: >
        use this method to add to the list of the emails addresses
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DistributionMail'
  '/app/distribution/emails/{id}':
    delete:
      operationId: deleteDistributionEmails
      tags:
        - AppMessage
      description: |
        use this method to remove  one distribution email from the list of the emails addresses
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        '200':
          description: OK
        '403':
          description: Unauthorized action
        '405':
          description: Invalid reference
        '500':
          description: Internal Server Error
  '/app/distribution/emails/export':
    get:
      operationId: getDistributionEmailsExport
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: 'export the file of all distribution mails as XLS '
      responses:
        '200':
          description: OK
          content:
            application/xls:
              schema:
                type: string
                format: binary
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/app/distribution/emails/subscription/{userId}':
    get:
      operationId: getDistributionEmailSubscription
      security:
        - basicAuth: []
      tags:
        - AppMessage
      description: 'export the file of all distribution mails as XLS '
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistributionMail'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
  '/help/categories':
    x-swagger-router-controller: help
    get:
      operationId: getHelpCategories
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        retrieve the list of categories for the help section
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelpCategory'
        '500':
          description: Internal Server Error
    post:
      operationId: createHelpCategory
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        create a new category in the list of categories for the help section
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpCategory'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/HelpCategory'
  '/help/categories/{id}':
    x-swagger-router-controller: help
    get:
      operationId: getHelpCategory
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        retrieve a help category of the help section
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpCategory'
        '500':
          description: Internal Server Error
    put:
      operationId: updateHelpCategory
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        edit an existing help category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpCategory'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/HelpCategory'
    delete:
      operationId: deleteHelpCategory
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        remove an existing help category
        if it contains articles, it will also delete them completely
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  '/help/categories/{id}/articles':
    x-swagger-router-controller: help
    get:
      operationId: getCategoryArticles
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        retrieve a help article of the help category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: skipcontent
          in: query
          description: load or not the content of an article
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelpArticle'
        '500':
          description: Internal Server Error
    post:
      operationId: createCategoryArticle
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        add a new article under the help category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpArticle'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/HelpArticle'
  '/help/articles/{id}':
    x-swagger-router-controller: help
    get:
      operationId: getHelpArticle
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        retrieve a help article of the help section
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpArticle'
        '500':
          description: Internal Server Error
    put:
      operationId: updateHelpArticle
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        edit an existing help article
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpArticle'
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/HelpArticle'
    delete:
      operationId: deleteHelpArticle
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        remove an existing article from a category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '405':
          description: Invalid input
        '500':
          description: Internal Server Error
  /help/articles/highlighted:
    x-swagger-router-controller: help
    get:
      operationId: getHelpHighlightedArticles
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        retrieve the list of highlighted articles for the help section
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelpArticle'
        '500':
          description: Internal Server Error
  '/help/articles/{id}/highlight':
    x-swagger-router-controller: help
    put:
      operationId: toggleHighlightArticle
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        toggle the highlighted aspect of an article
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpArticle'
        '500':
          description: Internal Server Error
  /help/search:
    x-swagger-router-controller: help
    get:
      operationId: helpSearch
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        search in the help for article and categories, etc
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpSearchResult'
        '500':
          description: Internal Server Error
  /help/links:
    x-swagger-router-controller: help
    get:
      operationId: getHelpLinks
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        retrieve the list of links
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HelpLink'
        '500':
          description: Internal Server Error
    post:
      operationId: createHelpLink
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        retrieve the list of links
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpLink'
        '403':
          description: Access denied
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/HelpLink'
  '/help/links/{id}':
    x-swagger-router-controller: help
    get:
      operationId: getHelpLink
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        retrieve one help link
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpLink'
        '500':
          description: Internal Server Error
    put:
      operationId: updateHelpLink
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        edit one help link
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpLink'
        '403':
          description: Access denied
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/HelpLink'
    delete:
      operationId: removeHelpLink
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        remove one help link
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
        '403':
          description: Access denied
        '500':
          description: Internal Server Error
  /help/support/mail:
    x-swagger-router-controller: help
    post:
      operationId: contactSupport
      security:
        - basicAuth: []
      tags:
        - Help
      description: |
        send an email to the support team to open a ticket
      responses:
        '200':
          description: ok
        '500':
          description: Internal Server Error
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SupportFileData'
  '/history/{userId}/groups/{groupId}/recoverable':
    get:
      operationId: isUserRecoverable
      security:
        - basicAuth: []
      tags:
        - History
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
        - name: groupId
          in: path
          schema:
            type: string
          required: true
      description: |
        verify if the user is recoverable in the group
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRecoveryOption'
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
  '/history/{userId}/groups/{groupId}/recoverable/profiles/{profileId}':
    post:
      operationId: recoverUserMembership
      security:
        - basicAuth: []
      tags:
        - History
      parameters:
        - name: userId
          in: path
          schema:
            type: string
          required: true
        - name: groupId
          in: path
          schema:
            type: string
          required: true
        - name: profileId
          in: path
          schema:
            type: string
          required: true
      description: |
        recover the user memebership in the group
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
  '/history/job/memberships/revocation':
    post:
      operationId: revokeUserMemberships
      security:
        - basicAuth: []
      tags:
        - History
      description: |
        revoke the user memebership in all the groups
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRevocationRequest'
    get:
      operationId: getRevocations
      security:
        - basicAuth: []
      tags:
        - History
      description: |
        get all the planned revocations
      parameters:
        - name: limit
          in: query
          description: |
            the amount of values per page
            values = 25 (default) / 50 / 100 / 0 (all)
            if not any value is passed, the default value (25) is used
          required: false
          schema:
            type: number
        - name: page
          in: query
          description: the number of the page
          required: false
          schema:
            type: number
        - name: filter
          in: query
          description: the type of agreement (waiting / approved / rejected)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedUserRevocationRequest'
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
  '/history/memberships/groups/{groupId}/users/{userId}':
    delete:
      operationId: cleanUserMembershipLogs
      security:
        - basicAuth: []
      tags:
        - History
      description: |
        clean the user membership in all log tables, so it cannot be restored anymore after
      parameters:
        - name: groupId
          schema:
            type: string
          required: true
          in: path
        - name: userId
          schema:
            type: string
          required: true
          in: path
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
  '/history/memberships/expiration':
    post:
      operationId: setMembershipsExpiration
      tags:
        - History
      security:
        - basicAuth: []
      description: |
        Set on expiration date to the user memberships
        It's reusing the expiration date introduced in the invite user action
        UserMembershipsExpirationRequest
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserMembershipsExpirationRequest'
  '/nodes/{id}/new/content/notifications':
    post:
      operationId: fireNewContentNotification
      tags:
        - File
      security:
        - basicAuth: []
      description: |
        Will generate a new notification email
        for each nodeRef passed it will be gathered in a single mail
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
  '/repositories':
    get:
      operationId: getAvailableExternalRepositories
      security:
        - basicAuth: []
      tags:
        - ExternalRepository
      description: get availible external repositories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '403':
          description: Unauthorized action
        '500':
          description: Internal Server Error
  '/repositories/{id}/ticket':
    post:
      operationId: getExternalRepoTicket
      security:
        - basicAuth: []
      tags:
        - ExternalRepository
      description: get external repo ticket (AresBridge)  based on date, HTTP verb and path
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK - Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '403':
          description: Unauthorized
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/TicketRequestInfo'
  '/repositories/{id}/transaction':
    post:
      operationId: saveExternalRepoTransaction
      security:
        - basicAuth: []
      tags:
        - ExternalRepository
      description: add transaction of external repo
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ok
        '403':
          description: Unauthorized
        '405':
          description: Invalid object
        '500':
          description: Internal Server Error
      requestBody:
        $ref: '#/components/requestBodies/ExternalRepoTransaction'
tags:
  - name: Header
    description: all the operations related to the Headers
  - name: Category
    description: all the operations related to the Cagetories
  - name: InterestGroup
    description: all the operations related to the Interest groups
  - name: User
    description: all the operations related to the Users
  - name: Content
    description: all the operations related to the content of one Interest group
  - name: Information
    description: all the operations related to the Information service
  - name: Events
    description: all the operations related to the Events service
  - name: Members
    description: all the operations related to the Members/Directory service
  - name: Search
    description: >-
      all the operations related to the search service, within one Interest
      Group or the global search service
  - name: Profile
    description: >-
      all the operations related to the profile definitions inside one Interest
      Group
  - name: Keywords
    description: all the operations related to the keywords feature of CIRCABC
  - name: DynamicProperties
    description: >-
      all the operations related to the dynamic properties management inside one
      Interest Group
  - name: Notification
    description: >-
      all the operations related to the notifications, from the management to
      the execution of an automatic notification
  - name: Space
    description: all the operations related to the spaces or folders of one Interest Group
  - name: Permission
    description: >-
      all the operations related to the permission mamangment inside one
      Interest Group, it can be used for a specific permission configuration of
      one space/document or for the creation of an access profile
  - name: Translations
    description: >-
      all the operations related to the translation of any kind of node,
      property, if applicable
  - name: Audit
    description: >-
      all the operations related to the audit/log features of CIRCABC, covering
      the tool of audit inside one Interest Group or for the whole application
  - name: Forum
    description: all the operations related to the forums inside the newsgroups service
  - name: Topic
    description: all the operations related to the topics inside the newsgroups service
  - name: Post
    description: all the operations related to the posts inside the newsgroups service
  - name: Dashboard
    description: the dashboard feature for one user or for one Interest group
  - name: Help
    description: 'the help section of the application, where to create FAQs and help article'
  - name: File
    description: all the operations related to the file transfer upload
  - name: ExternalRepository
    description: all the operations related to the external repositories
components:
  requestBodies:
    ExternalRepoTransaction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExternalRepoTransaction'
      required: true
    KeywordDefinition:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeywordDefinition'
      required: true
    ApplicantAction:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicantAction'
      required: true
    HelpLink:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HelpLink'
      required: true
    Node:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Node'
      required: true
    News:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/News'
      required: true
    DynamicPropertyDefinition:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DynamicPropertyDefinition'
      required: true
    Profile:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Profile'
      required: true
    EventDefinition:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventDefinition'
      required: true
    HelpArticle:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HelpArticle'
      required: true
    Header:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Header'
      required: true
    Category:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
      required: true
    MembershipPostDefinition:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MembershipPostDefinition'
      required: true
    EmailDefinition:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmailDefinition'
    contactLeadersByEmailBody:
      content:
        application/json:
          schema:
            type: string
      required: true
    AppMessage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppMessage'
      required: true
    setDisplayOldMessageBody:
      content:
        application/json:
          schema:
            type: boolean
      required: true
    HelpCategory:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HelpCategory'
      required: true
    TicketRequestInfo:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TicketRequestInfo'
  securitySchemes:
    basicAuth:
      type: http
      description: HTTP Basic Authentication
      scheme: basic
  schemas:
    TicketRequestInfo:
      type: object
      required:
        - requestDate
        - httpVerb
        - path
      properties:
        requestDate:
          type: string
          description: request date
          example: Thu, 20 Apr 2017 11:16:08 GMT
        httpVerb:
          type: string
          description: HTTP verb of service that we want to call
          example: GET or POST
        path:
          type: string
          description: path of service that we want to call
          example: /Ares/bridge/services/v1/document
    Header:
      type: object
      description: Representation of a header in CIRCABC in a JSON object
      required:
        - name
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        description:
          $ref: '#/components/schemas/i18nProperty'
    Category:
      type: object
      description: Representation of a Category in CIRCABC in a JSON object
      required:
        - name
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        logoRef:
          type: string
        useSingleContact:
          type: boolean
        contactEmails:
          type: array
          items:
            type: string
        contactVerified:
          type: boolean
    InterestGroup:
      type: object
      description: Representation of an Interest group in CIRCABC in a JSON object
      required:
        - name
        - permissions
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        description:
          $ref: '#/components/schemas/i18nProperty'
        contact:
          $ref: '#/components/schemas/i18nProperty'
        libraryId:
          type: string
        informationId:
          type: string
        newsgroupId:
          type: string
        eventId:
          type: string
        isPublic:
          type: boolean
        isRegistered:
          type: boolean
        allowApply:
          type: boolean
        permissions:
          type: object
          additionalProperties:
            type: string
          description: |
            Representation of the permissions given to the user making the call.
            To know what are the permissions for each services inside one group.
        logoUrl:
          type: string
    InterestGroupPostModel:
      type: object
      description: The object of an Interest group in CIRCABC to be created
      required:
        - name
      properties:
        name:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        description:
          $ref: '#/components/schemas/i18nProperty'
        contact:
          $ref: '#/components/schemas/i18nProperty'
        leaders:
          type: array
          items:
            type: string
        notify:
          type: boolean
        notifyText:
          $ref: '#/components/schemas/i18nProperty'
    GroupConfigurationNewsgroups:
      type: object
      required:
        - enableFlagNewTopic
        - enableFlagNewForum
        - ageFlagNewTopic
        - ageFlagNewForum
      properties:
        enableFlagNewTopic:
          type: boolean
        enableFlagNewForum:
          type: boolean
        ageFlagNewTopic:
          type: number
        ageFlagNewForum:
          type: number
    GroupConfiguration:
      type: object
      description: >
        JSON object that contains all the configuration variables of an Interest
        Group
      required:
        - newsgroups
      properties:
        information:
          type: object
          additionalProperties:
            type: string
        library:
          type: object
          additionalProperties:
            type: string
        newsgroups:
          $ref: '#/components/schemas/GroupConfigurationNewsgroups'
        events:
          type: object
          additionalProperties:
            type: string
        dashboard:
          type: object
          additionalProperties:
            type: string
    Attachment:
      type: object
      description: a post attachment
      properties:
        name:
          type: string
        title:
          type: string
        id:
          type: string
        attachedToId:
          type: string
        size:
          type: number
        encoding:
          type: string
        mimetype:
          type: string
        isLink:
          type: boolean
    AttachmentsRemainingSize:
      type: object
      required:
        - remainingSize
      properties:
        remainingSize:
          type: number
    Node:
      type: object
      description: representation of a node
      properties:
        id:
          type: string
        type:
          type: string
        service:
          type: string
          enum:
            - library
            - information
            - events
            - newsgroups
            - directory
        name:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        description:
          $ref: '#/components/schemas/i18nProperty'
        properties:
          type: object
          additionalProperties:
            type: string
        permissions:
          type: object
          additionalProperties:
            type: string
          description: >
            Representation of the permissions given to the user making the call.

            To know what are the permissions for the specific node, the
            permission

            definition may vary depending on its type or service.
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        parentId:
          type: string
        notifications:
          type: string
        favourite:
          type: boolean
          description: |
            true if the current user faved the node
        hasSubFolders:
          type: boolean
        hasGuestAccess:
          type: boolean
    ArchiveNode:
      allOf:
        - $ref: '#/components/schemas/Node'
        - type: object
          properties:
            deletedBy:
              type: string
            deletedDate:
              type: string
              format: date
    EventItemDefinition:
      type: object
      description: definition of an event or meeting. Used to retrieve information about it
      properties:
        id:
          type: string
        appointmentContainerId:
          type: string
        igId:
          type: string
        appointmentType:
          type: string
          enum:
            - Event
            - Meeting
        title:
          type: string
        appointmentDate:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        contact:
          type: string
        meetingStatus:
          type: string
        eventAbstract:
          type: string
        location:
          type: string
        occurrenceRate:
          type: string
        timeZone:
          type: string
    EventDefinition:
      type: object
      required:
        - appointmentTypeEvent
        - title
        - language
        - timezone
        - contactName
        - contactPhone
        - contactEmail
        - meetingPublicAvailability
        - meetingType
        - eventType
        - eventPriority
        - dateInfo
        - attendantsInfo
        - repeatsInfo
      description: >-
        definition of an event or meeting. Used to create and retrieve
        information about it
      properties:
        appointmentTypeEvent:
          type: boolean
        id:
          type: string
        igId:
          type: string
        title:
          type: string
        dateInfo:
          $ref: '#/components/schemas/DateInfo'
        language:
          type: string
        timezone:
          type: string
        eventAbstract:
          type: string
        invitationMessage:
          type: string
        location:
          type: string
        repeatsInfo:
          $ref: '#/components/schemas/RepeatsInfo'
        attendantsInfo:
          $ref: '#/components/schemas/AttendantsInfo'
        enableNotification:
          type: boolean
        contactName:
          type: string
        contactPhone:
          type: string
        contactEmail:
          type: string
        contactUrl:
          type: string
        meetingPublicAvailability:
          type: boolean
        meetingOrganisation:
          type: string
        meetingAgenda:
          type: string
        meetingType:
          type: string
        meetingLibrarySection:
          type: string
        eventType:
          type: string
          enum:
            - Task
            - Appointment
            - Other
        eventPriority:
          type: string
          enum:
            - Low
            - Medium
            - High
            - Urgent
    DateInfo:
      type: object
      required:
        - date
        - startTime
        - endTime
      description: information about the meeting/event dates
      properties:
        date:
          type: string
          format: date
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    AttendantsInfo:
      type: object
      required:
        - audienceStatusOpen
      description: >-
        information about the meeting/event attendants (invited users or
        profiles, external users)
      properties:
        audienceStatusOpen:
          type: boolean
        invitedUsersOrProfiles:
          type: array
          items:
            type: string
        invitedExternalEmails:
          type: array
          items:
            type: string
        audience:
          type: array
          items:
            $ref: '#/components/schemas/AudienceEntry'
    AudienceEntry:
      type: object
      description: event/meeting members with their status
      properties:
        userId:
          type: string
        status:
          type: string
    RepeatsInfo:
      type: object
      description: 'in case an event/meeting repeats, stores this information'
      properties:
        mainOccurence:
          type: string
          enum:
            - OnlyOnce
            - Times
            - EveryTimes
        timesOccurence:
          type: string
          enum:
            - Daily
            - Weekly
            - EveryTwoWeeks
            - MonthlyByDate
            - MonthlyByWeekday
            - Yearly
            - MondayToFriday
            - MondayWednseyFriday
            - TuesdayThursday
        everyTimesOccurence:
          type: string
          enum:
            - days
            - weeks
            - months
        times:
          type: integer
          format: int32
        everyTime:
          type: integer
          format: int32
    PagedNodes:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    PagedArchiveNodes:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ArchiveNode'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    PagedSearchNodes:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SearchNode'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    SearchNode:
      allOf:
        - $ref: '#/components/schemas/Node'
        - type: object
          properties:
            targetNode:
              type: string
            resultType:
              type: string
              description: To precise if it is a folder / post / event / file / etc.
    PagedUserProfile:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    User:
      type: object
      description: a CIRCABC user
      properties:
        userId:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        phone:
          type: string
        uiLang:
          type: string
        contentFilterLang:
          type: string
        visibility:
          type: boolean
        properties:
          type: object
          additionalProperties:
            type: string
          description: >
            properties field will receive all the configuration parameters
            relative

            to the user accound. For example notification / prefered language /
            etc.
        avatar:
          type: string
          description: >
            Used to get the URL of the user picture that will be shown
            everywhere in the app
        defaultAvatar:
          type: boolean
          description: |
            Is this avatar the default avatar?
    UserPostDefinition:
      type: object
      description: a new CIRCABC user
      properties:
        userId:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        phone:
          type: string
        title:
          type: string
        companyId:
          type: string
        fax:
          type: string
        urlAddress:
          type: string
        postalAddress:
          type: string
        description:
          type: string
        password:
          type: string
        currentIgId:
          type: string
    i18nProperty:
      type: object
      description: >
        The object that is used to compile all the translations of a node into a

        JSON object.

        It is basically composed of a map with a key languaguage code and its
        value
      additionalProperties:
        type: string
    UserProfile:
      type: object
      description: the representation of the membership of a user inside an Interest group
      properties:
        user:
          $ref: '#/components/schemas/User'
        profile:
          $ref: '#/components/schemas/Profile'
        expirationDate:
          type: string
          format: dateTime
    InterestGroupProfile:
      type: object
      description: the representation of the membership of a user with an Interest group
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
        interestGroup:
          $ref: '#/components/schemas/InterestGroup'
    Profile:
      type: object
      description: >-
        the representation of an access profile definition inside an Interest
        Group
      properties:
        id:
          type: string
        name:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        groupName:
          type: string
        permissions:
          type: object
          additionalProperties:
            type: string
        imported:
          type: boolean
        importedRef:
          type: string
          description: >
            in the case the profile is imported from another group, it is the IG
            nodeRef from which

            it has been imported
        exported:
          type: boolean
        exportedRefs:
          type: array
          items:
            type: string
          description: >
            in the case the profile is exported and imported at least once in an
            IG, it is the list of

            all the IGs in which the profile has been imported into
    Applicant:
      type: object
      description: an application for membership representation
      properties:
        submitted:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        justification:
          type: string
    ApplicantAction:
      type: object
      properties:
        username:
          type: string
        action:
          type: string
        message:
          type: string
    KeywordDefinition:
      type: object
      required:
        - title
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
    DynamicPropertyDefinition:
      type: object
      required:
        - propertyType
        - title
      properties:
        id:
          type: string
          readOnly: true
        index:
          type: number
          readOnly: true
        name:
          type: string
          readOnly: true
        title:
          $ref: '#/components/schemas/i18nProperty'
        propertyType:
          type: string
          enum:
            - DATE_FIELD
            - TEXT_FIELD
            - TEXT_AREA
            - SELECTION
            - MULTI_SELECTION
        possibleValues:
          description: |
            non mandatory field, used only when having select type
          type: array
          items:
            type: string
        updatedValues:
          description: |
            non mandatory field, used only when having select type
          type: array
          items:
            $ref: '#/components/schemas/DynamicPropertyDefinitionUpdatedValues'
    PermissionDefinitionPermissions:
      type: object
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/PermissionDefinitionPermissionsProfiles'
        users:
          type: array
          items:
            $ref: '#/components/schemas/PermissionDefinitionPermissionsUsers'
    PermissionDefinition:
      type: object
      description: the representation of all the permission configuration of one node
      required:
        - inherited
        - permissions
      properties:
        inherited:
          type: boolean
        permissions:
          $ref: '#/components/schemas/PermissionDefinitionPermissions'
    NotificationDefinition:
      type: object
      description: the representation of all the notification configuration of one node
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDefinitionProfiles'
        users:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDefinitionUsers'
    PagedNotificationConfigurations:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/NotificationConfiguration'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    NotificationConfiguration:
      type: object
      description: notification configuration of a node
      properties:
        userName:
          type: string
        status:
          type: string
          enum:
            - SUBSCRIBED
            - UNSUBSCRIBED
            - INHERITED
        type:
          type: string
        authority:
          type: string
        nodeId:
          type: string
        inherited:
          type: boolean
        title:
          $ref: '#/components/schemas/i18nProperty'
    PagedSubscribedUsers:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SubscribedUser'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    SubscribedUser:
      type: object
      description: subscribed user of a notification status
      properties:
        userName:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        emailAddress:
          type: string
        userProperties:
          type: object
          additionalProperties:
            type: string
        notificationLanguage:
          type: string
        personId:
          type: string
    PasteNotificationsState:
      type: object
      description: the state of the paste notification
      properties:
        pasteEnabled:
          type: boolean
        pasteAllEnabled:
          type: boolean
    Version:
      type: object
      description: the description of a version of a content of any kind
      properties:
        node:
          $ref: '#/components/schemas/Node'
        versionLabel:
          type: string
        notes:
          type: string
    Translations:
      type: object
      description: >
        all the translations attachted to one node, it is not the translations
        of each of its properties

        but the trasnlations of its content
      properties:
        pivot:
          $ref: '#/components/schemas/Node'
        translations:
          type: array
          items:
            $ref: '#/components/schemas/Node'
    Comment:
      type: object
      description: a comment that have been added to any kind of content on CIRCABC
      properties:
        text:
          type: string
    importantMessage:
      type: object
      properties:
        date:
          type: string
          format: date
        message:
          type: string
    GroupDashboard:
      type: object
      description: >
        the representation of the dashboard of one CIRCABC Interest Group

        it contains the next events, the list of activities in all its Interest
        group,

        and any other information needed

        --- Description ---

        "entries" =  all the new content in all the groups the user is member in

        "applicationRequests" = all the applications for membership waiting on
        approval

        "incomingEvents" = all the events in the user calendat that are coming
        soon

        "importantMessages" = a communication chanel that IGLeaders can user

        >> add any useful dashboard elements as a new properties
      properties:
        groupId:
          type: string
        group:
          $ref: '#/components/schemas/InterestGroup'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/GroupDashboardEntry'
        incomingEvents:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        applicationRequests:
          type: array
          items:
            $ref: '#/components/schemas/Applicant'
        importantMessages:
          type: array
          items:
            $ref: '#/components/schemas/importantMessage'
    GroupDashboardEntry:
      type: object
      description: |
        all the activities inside one group
        it shall returns a filtered content based on the user's permission
        the 'news' should be sorted by date !
      properties:
        date:
          type: string
          format: date-time
        groupId:
          type: string
        news:
          type: array
          items:
            $ref: '#/components/schemas/EntryEvent'
    EntryEvent:
      type: object
      properties:
        date:
          type: string
          format: date-time
        type:
          type: string
        information:
          type: string
        node:
          $ref: '#/components/schemas/Node'
    MembershipPostDefinition:
      type: object
      properties:
        adminNotifications:
          type: boolean
        userNotifications:
          type: boolean
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
        notifyText:
          type: string
    LogSearchResult:
      type: object
      required:
        - logDate
        - activityDescription
        - userId
        - information
        - path
        - success
      properties:
        logDate:
          type: string
          format: date-time
        activityDescription:
          type: string
        serviceDescription:
          type: string
        userId:
          type: string
        information:
          type: string
        path:
          type: string
        success:
          type: boolean
    PagedLogSearchResult:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LogSearchResult'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    InformationPage:
      type: object
      properties:
        url:
          type: string
        adapt:
          type: boolean
        displayOldInformation:
          type: boolean
        permissions:
          type: object
          additionalProperties:
            type: string
          description: >
            Representation of the permissions given to the user making the call.

            To know what are the permissions for the specific node, the
            permission

            definition may vary depending on its type or service.
    Status:
      type: object
      properties:
        result:
          type: boolean
    PagedEventItemDefinition:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventItemDefinition'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    EmailDefinition:
      type: object
      properties:
        subject:
          type: string
        content:
          type: string
        attachments:
          type: array
          items:
            type: string
        copyToSender:
          type: boolean
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
    PagedAutoUploadConfiguration:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AutoUploadConfiguration'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    AutoUploadConfiguration:
      type: object
      properties:
        idConfiguration:
          type: number
        status:
          type: number
        igName:
          type: string
        fileId:
          type: string
        parentId:
          type: string
        fileName:
          type: string
        ftpHost:
          type: string
        ftpPort:
          type: number
        ftpUsername:
          type: string
        ftpPassword:
          type: string
        ftpPath:
          type: string
        dateRestriction:
          type: string
        dayChoice:
          type: number
        hourChoice:
          type: number
        autoExtract:
          type: boolean
        jobNotifications:
          type: boolean
        emails:
          type: string
    MultilingualAspectMetadata:
      type: object
      description: |
        object used for both enabling a document for multilingual aspect.
      properties:
        pivotLang:
          type: string
        author:
          type: string
    MultilingualEditionMetadata:
      type: object
      description: |
        object used for both enabling a document for  create a new edition.
      properties:
        note:
          type: string
        minorChange:
          type: boolean
        newPivotRef:
          type: string
        disableNotifications:
          type: boolean
    Result:
      type: object
      properties:
        code:
          type: number
    GuardAuthorization:
      type: object
      properties:
        granted:
          type: boolean
    Subscribed:
      type: object
      required:
        - subscribed
      properties:
        subscribed:
          type: boolean
    RestoreNodeMetadata:
      type: object
      properties:
        archiveNodeId:
          type: string
          description: the node Id of the archive to be restored
        targetFolderId:
          type: string
          description: |
            he node Id of the target space into which the node will be restored
            it can be left empty
    UserActionLog:
      type: object
      properties:
        actionDate:
          type: string
          format: Date
        action:
          type: string
        node:
          $ref: '#/components/schemas/Node'
        igNode:
          type: string
        username:
          type: string
    UserNewsFeed:
      type: object
      required:
        - when
      properties:
        when:
          type: string
          enum:
            - today
            - week
            - previousWeek
        uploads:
          type: number
        updates:
          type: number
        comments:
          type: number
        groupFeeds:
          type: array
          items:
            $ref: '#/components/schemas/InterestGroupFeed'
    InterestGroupFeed:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        feed:
          type: array
          items:
            $ref: '#/components/schemas/UserActionLog'
    IGStructure:
      type: object
      description: structure of an IG in HTML list format
      properties:
        structure:
          type: string
    IGTimelineElement:
      type: object
      description: one log activity entry describing the action performed on the IG
      properties:
        monthActivity:
          type: string
          format: date
        service:
          type: string
        activity:
          type: string
        actionId:
          type: number
        actionNumber:
          type: number
    NameValue:
      type: object
      description: a property and their value
      properties:
        name:
          type: string
        value:
          type: string
    SimpleId:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    AbuseReport:
      type: object
      properties:
        reportDate:
          type: string
        reporter:
          type: string
        message:
          type: string
    PagedNews:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/News'
        total:
          type: number
    News:
      type: object
      properties:
        id:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        content:
          type: string
        date:
          type: string
          format: date
        pattern:
          type: string
          enum:
            - text
            - document
            - image
            - date
            - iframe
        layout:
          type: string
          enum:
            - normal
            - important
            - reminder
        size:
          type: number
          description: |
            valid values are  1 / 2 / 3
        files:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        url:
          type: string
        modified:
          type: string
          format: date-time
        modifier:
          type: string
        created:
          type: string
          format: date-time
        creator:
          type: string
        permissions:
          type: object
          additionalProperties:
            type: string
          description: |
            Representation of the permissions given to the user making the call.
            To know what are the permissions for each services inside one group.
        properties:
          type: object
          additionalProperties:
            type: string
    PagedShares:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Share'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    Share:
      type: object
      properties:
        igId:
          type: string
        igName:
          type: string
        permission:
          type: string
    ShareIGsAndPermissions:
      type: object
      properties:
        igs:
          type: array
          items:
            $ref: '#/components/schemas/NameValue'
        permissions:
          type: array
          items:
            type: string
    PagedStatisticsContents:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/StatisticsContent'
        total:
          type: number
          description: |
            return the total amount of nodes, without paging
            so the UI can compute the number of pages
    StatisticsContent:
      type: object
      properties:
        name:
          type: string
        size:
          type: string
        modifiedDate:
          type: string
          format: date
        downloadURL:
          type: string
    ShareSpaceItem:
      type: object
      properties:
        id:
          type: string
        path:
          type: string
    GroupCreationRequest:
      type: object
      required:
        - from
        - justification
        - proposedName
      properties:
        id:
          type: number
        from:
          $ref: '#/components/schemas/User'
        proposedName:
          type: string
        proposedTitle:
          $ref: '#/components/schemas/i18nProperty'
        proposedDescription:
          $ref: '#/components/schemas/i18nProperty'
        requestDate:
          type: string
          format: dateTime
        categoryRef:
          type: string
        leaders:
          type: array
          items:
            $ref: '#/components/schemas/User'
        agreement:
          description: |
            1 == agreed
            -1 == refused
            0 == waiting approval
          type: number
        reviewer:
          $ref: '#/components/schemas/User'
        justification:
          type: string
        argument:
          type: string
        agreementDate:
          type: string
          format: dateTime
    GroupCreationRequestApproval:
      type: object
      required:
        - id
        - agreement
      properties:
        id:
          type: number
        agreement:
          description: |
            1 == agreed
            -1 == refused
            0 == waiting approval
          type: number
        justification:
          type: string
    PagedGroupCreationRequests:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GroupCreationRequest'
        total:
          type: number
    OfficeEditResult:
      type: object
      required:
        - id
        - canEdit
      properties:
        id:
          type: string
        canEdit:
          type: boolean
        documentLocation:
          type: string
        errorDescription:
          type: string
    PreviewResult:
      type: object
      required:
        - ready
        - message
        - messageCode
      properties:
        ready:
          type: boolean
        message:
          type: string
        messageCode:
          type: string
        contentLength:
          type: number
    RecentDiscussion:
      type: object
      required:
        - post
        - topic
      description: >
        Representation of the last reply posted inside a topic.

        the post content should be stripped from all HTML code, in order to
        display a preview of the last comment
      properties:
        post:
          $ref: '#/components/schemas/Node'
        topic:
          $ref: '#/components/schemas/Node'
    AuditActivity:
      type: object
      required:
        - id
        - name
        - service
      properties:
        id:
          type: number
        name:
          type: string
        service:
          type: string
    IGData:
      type: object
      required:
        - igId
        - categoryId
        - igName
      properties:
        igId:
          type: string
        categoryId:
          type: string
        igName:
          type: string
    BulkImportUserData:
      type: object
      required:
        - username
      properties:
        username:
          type: string
        igName:
          type: string
        igRef:
          type: string
        fromFile:
          type: string
        email:
          type: string
        status:
          type: string
        profileId:
          type: string
    BulkInviteData:
      type: object
      required:
        - bulkImportUserData
        - igProfiles
      properties:
        bulkImportUserData:
          type: array
          items:
            $ref: '#/components/schemas/BulkImportUserData'
        igProfiles:
          type: array
          items:
            $ref: '#/components/schemas/NameValue'
    PagedAppMessages:
      type: object
      required:
        - data
        - total
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AppMessage'
        total:
          type: number
    AppMessage:
      type: object
      required:
        - id
        - content
        - level
        - enabled
        - displayTime
      properties:
        id:
          type: number
        content:
          type: string
        dateClosure:
          type: string
          format: date-time
        level:
          type: string
        enabled:
          type: boolean
        displayTime:
          type: number
    AdminContactRequest:
      type: object
      properties:
        content:
          type: string
        sendCopy:
          type: boolean
    MemberCount:
      type: object
      properties:
        count:
          type: number
    MailTemplateDefinition:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subject:
          type: string
        text:
          type: string
    MailTemplateId:
      type: object
      properties:
        id:
          type: string
    HelpCategory:
      type: object
      description: Representation of an Help Category in CIRCABC in a JSON object
      properties:
        id:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        numberOfArticles:
          type: number
    HelpArticle:
      type: object
      description: Representation of an Help Article in CIRCABC in a JSON object
      properties:
        id:
          type: string
        parentId:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        content:
          $ref: '#/components/schemas/i18nProperty'
        lastUpdate:
          type: string
          format: date-time
        author:
          type: string
        highlighted:
          type: boolean
        visitCounter:
          type: number
    DisplayConfiguration:
      type: object
      description: Representation of configuration in a JSON object
      properties:
        display:
          type: boolean
    EnableConfiguration:
      type: object
      description: Representation of configuration in a JSON object
      properties:
        enable:
          type: boolean
    DynamicPropertyDefinitionUpdatedValues:
      type: object
      properties:
        old:
          type: string
        status:
          type: string
        new:
          type: string
    PermissionDefinitionPermissionsProfiles:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
        permission:
          type: string
        inherited:
          type: boolean
    PermissionDefinitionPermissionsUsers:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        permission:
          type: string
        inherited:
          type: boolean
    NotificationDefinitionProfiles:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
        notifications:
          type: string
        inherited:
          type: boolean
    NotificationDefinitionUsers:
      type: object
      description: Representation of configuration in a JSON object
      properties:
        user:
          $ref: '#/components/schemas/User'
        notifications:
          type: string
        inherited:
          type: boolean
    HelpSearchResult:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/HelpArticle'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/HelpCategory'
        links:
          type: array
          items:
            $ref: '#/components/schemas/HelpLink'
    HelpLink:
      type: object
      properties:
        id:
          type: string
        title:
          $ref: '#/components/schemas/i18nProperty'
        href:
          type: string
    GroupPath:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/InterestGroup'
        category:
          $ref: '#/components/schemas/Category'
        header:
          $ref: '#/components/schemas/Header'
    FileData:
      type: object
      properties:
        fileData:
          type: string
          format: binary
      required:
        - fileData
    TranslationFileData:
      type: object
      properties:
        lang:
          type: string
        fileData:
          type: string
          format: binary
      required:
        - fileData
        - lang
    SupportFileData:
      type: object
      properties:
        reason:
          type: string
        name:
          type: string
        email:
          type: string
        subject:
          type: string
        content:
          type: string
        fileData1:
          type: string
          format: binary
        fileData2:
          type: string
          format: binary
      required:
        - reason
        - name
        - email
        - content
    UserRecoveryOption:
      type: object
      properties:
        recoverable:
          type: boolean
        profile:
          $ref: '#/components/schemas/Profile'
    UserRevocationRequest:
      type: object
      properties:
        id:
          type: number
        userIds:
          type: array
          items:
            type: string
        revocationDate:
          type: string
          format: date-time
        requester:
          type: string
        requestState:
          type: number
        jobStarted:
          type: string
          format: date-time
        jobEnded:
          type: string
          format: date-time
        groupId:
          type: string
          description: used only when cleaing the permission of members of a group
        action:
          type: string
          enum:
            - clean-permission
            - revoke
          description: specify the type of revocation
    PagedUserRevocationRequest:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserRevocationRequest'
        total:
          type: number
    UserMembershipsExpirationRequest:
      type: object
      properties:
        userId:
          type: string
        expirationDate:
          type: string
          format: date-time
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/InterestGroupProfile'
    FileUploadResult:
      type: object
      properties:
        nodeRef:
          type: string
    PagedDistributionMails:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DistributionMail'
        total:
          type: number
    DistributionMail:
      type: object
      properties:
        id:
          type: number
        emailAddress:
          type: string
    Ticket:
      type: object
      properties:
        ticket:
          type: string
    RepositoryConfiguration:
      type: object
      properties:
        name:
          type: string
        registrationDate:
          type: string
          format: dateTime
    GroupDeletionReport:
      type: object
      properties:
        lockedNodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        sharedNodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        sharedProfiles:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
    ExternalRepoTransaction:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        transactionId:
          type: string
    PreferenceConfiguration:
      type: object
      properties:
        library:
          $ref: '#/components/schemas/LibraryPreferences'
      required:
        - library
    LibraryPreferences:
      type: object
      properties:
        column:
          $ref: '#/components/schemas/ColumnOptions'
        listing:
          $ref: '#/components/schemas/ListingOptions'
      required:
        - column
        - listing
    ColumnOptions:
      type: object
      properties:
        name:
          type: boolean
        title:
          type: boolean
        version:
          type: boolean
        modification:
          type: boolean
        creation:
          type: boolean
        size:
          type: boolean
        expiration:
          type: boolean
        status:
          type: boolean
        description:
          type: boolean
        author:
          type: boolean
        securityRanking:
          type: boolean
    ListingOptions:
      type: object
      properties:
        page:
          type: number
        limit:
          type: number
        sort:
          type: string
      required:
        - page
        - limit
        - sort
    ExternalRepositoryData:
      type: object
      properties:
        nodeId:
          type: string
        nodeName:
          type: string
        versionLabel:
          type: string
        transactionId:
          type: string
        requestType:
          type: string
        documentId:
          type: string
        saveNumber:
          type: string
        registrationNumber:
          type: string
      required:
        - nodeId
        - nodeName
        - versionLabel
        - transactionId
