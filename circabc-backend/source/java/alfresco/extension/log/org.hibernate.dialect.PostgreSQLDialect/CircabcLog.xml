<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright 2006 European Community
  
   Licensed under the EUPL, Version 1.1 or \?as soon they
   will be approved by the European Commission - subsequent
   versions of the EUPL (the "Licence");
   You may not use this work except in compliance with the
   Licence.
   You may obtain a copy of the Licence at:
  
   https://joinup.ec.europa.eu/software/page/eupl
  
   Unless required by applicable law or agreed to in
   writing, software distributed under the Licence is
   distributed on an "AS IS" basis,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
   express or implied.
   See the Licence for the specific language governing
   permissions and limitations under the Licence.
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CircabcLog">

  <select
    id="select_log_records"
    parameterType="LogSearchParameter"
    resultType="LogSearchResult"
  >
    select user_name as userName ,
    cbc_log_activity.service_desc as serviceDescription,
    cbc_log_activity.activity_desc as activityDescription,
    log_date as logDate ,
    info as info ,
    path as path ,
    CAST("isOK" AS integer) as "isOK"
    from cbc_log , cbc_log_activity
    where cbc_log.activity_id = cbc_log_activity.id
    and ig_id = #{igID}
    and log_date between #{fromDate} and #{toDate}
    <if test="userName != null">
      AND user_name=#{userName}
    </if>
    <if test="serviceDescription != null">
      AND cbc_log_activity.service_desc = #{serviceDescription}
    </if>
    <if test="activityDescription != null">
      AND cbc_log_activity.activity_desc= #{activityDescription}
    </if>
    order by log_date desc
  </select>

  <select
    id="select_item_history"
    parameterType="map"
    resultType="LogSearchResult"
  >
    select distinct user_name as userName,
    cbc_log_activity.service_desc as serviceDescription,
    cbc_log_activity.activity_desc as activityDescription,
    log_date as logDate,
    info as info,
    path as path,
    CAST("isOK" AS integer) as "isOK" 
    from cbc_log, cbc_log_activity
    where cbc_log.activity_id = cbc_log_activity.id
    and (document_id = #{documentId, jdbcType=NUMERIC} or uuid = #{uuid, jdbcType=VARCHAR})
    order by log_date desc
  </select>

  <select id="count_item_history" parameterType="map" resultType="Long">
    select count(*) from (
    select distinct user_name as userName ,
    cbc_log_activity.service_desc as serviceDescription,
    cbc_log_activity.activity_desc as activityDescription,
    log_date as logDate,
    info as info,
    path as path,
    CAST("isOK" AS integer) as "isOK"
    from cbc_log, cbc_log_activity
    where cbc_log.activity_id = cbc_log_activity.id
    and (document_id = #{documentID, jdbcType=NUMERIC} or uuid = #{uuid, jdbcType=VARCHAR})
    order by log_date desc
    )
  </select>

  <select
    id="select_item_history_pagination"
    parameterType="map"
    resultType="LogSearchResult"
  >
    select * from (
    select row_number() over() as row_id, user_name as userName ,
    cbc_log_activity.service_desc as serviceDescription,
    cbc_log_activity.activity_desc as activityDescription,
    log_date as logDate ,
    info as info ,
    path as path ,
    CAST("isOK" AS integer) as "isOK"
    from cbc_log , cbc_log_activity
    where cbc_log.activity_id = cbc_log_activity.id
    and (document_id = #{documentID, jdbcType=NUMERIC} or uuid = #{uuid, jdbcType=VARCHAR})
    order by log_date desc
    ) as subquery where row_id > #{startRecord, jdbcType=NUMERIC}
    AND row_id <![CDATA[<]]>= #{startRecord, jdbcType=NUMERIC} + #{pageSize, jdbcType=NUMERIC}
  </select>


  <select
    id="select_log_records_count"
    parameterType="LogSearchParameter"
    resultType="Integer"
  >
    select count(*)
    from cbc_log , cbc_log_activity
    where cbc_log.activity_id = cbc_log_activity.id
    and ig_id = #{igID}
    and log_date between #{fromDate} and #{toDate}
    <if test="userName != null">
      AND user_name=#{userName}
    </if>
    <if test="serviceDescription != null">
      AND cbc_log_activity.service_desc = #{serviceDescription}
    </if>
    <if test="activityDescription != null">
      AND cbc_log_activity.activity_desc= #{activityDescription}
    </if>
  </select>

  <select
    id="select_log_records_page"
    parameterType="LogSearchLimitParameter"
    resultType="LogSearchResult"
  >
    SELECT B."userName",
        B.serviceDescription,
        B.activityDescription,
        B."logDate",
        B.info,
        B.path,
        B."isOK"
    FROM
        (SELECT row_number() over() as row_id, A.* FROM
            (SELECT user_name as "userName",
                cbc_log_activity.service_desc as serviceDescription,
                cbc_log_activity.activity_desc as activityDescription,
                log_date as "logDate",
                info,
                path,
                CAST("isOK" AS integer) as "isOK"
            FROM cbc_log
            JOIN cbc_log_activity ON cbc_log.activity_id = cbc_log_activity.id
            WHERE ig_id = #{igID}
                AND log_date BETWEEN #{fromDate} AND #{toDate}
                <if test="userName != null">
                    AND user_name = #{userName}
                </if>
                <if test="serviceDescription != null">
                    AND cbc_log_activity.service_desc = #{serviceDescription}
                </if>
                <if test="activityDescription != null">
                    AND cbc_log_activity.activity_desc = #{activityDescription}
                </if>
            ORDER BY log_date DESC) A
        ) B
    WHERE B.row_id > #{startRecord}
        AND B.row_id <![CDATA[<]]>= #{startRecord} + #{pageSize}
</select>


  <select id="select_log_activity" resultType="LogActivity">
    <![CDATA[
			select
			id as id,
			service_desc as serviceDescription ,
			activity_desc as activityDescription
			from
			cbc_log_activity
		]]>
  </select>

  <select
    id="select_log_activity_by_id"
    resultType="LogActivity"
    parameterType="map"
  >
    <![CDATA[
      SELECT
          distinct 
          cbc_log_activity.id as id,
          cbc_log_activity.service_desc as serviceDescription,
          cbc_log_activity.activity_desc as activityDescription
      FROM
          cbc_log
          INNER JOIN cbc_log_activity ON cbc_log.activity_id = cbc_log_activity.id
      WHERE
          cbc_log.ig_id= #{id}
		]]>
  </select>

  <insert id="insert_log_record" parameterType="LogRecord">
    <selectKey resultType="long" keyProperty="id" order="BEFORE">
      select nextval('cbc_log_seq') as value 
    </selectKey>
    insert into cbc_log (id,ig_id,document_id,user_name,log_date,activity_id,ig_name,info,path,"isOK",uuid)
    values
    (#{id},#{igID},#{documentID},#{user},#{date},#{activityID},#{igName},#{info},#{path},#{isOKBoolean, jdbcType=BOOLEAN},#{uuid, jdbcType=VARCHAR})
  </insert>

  <select
    id="select_activity_id"
    resultType="integer"
    parameterType="LogActivity"
  >
    select id
    from cbc_log_activity
    where service_desc = #{serviceDescription} and activity_desc=#{activityDescription}
  </select>

  <insert id="insert_activity" parameterType="LogActivity">
    <selectKey resultType="integer" keyProperty="id" order="BEFORE">
      select nextval('cbc_log_activity_seq') as value 
    </selectKey>
    insert into cbc_log_activity (id,service_desc,activity_desc)
    values (#{id},#{serviceDescription},#{activityDescription})
  </insert>

  <insert id="insert_log_rest" parameterType="LogRest">
    <selectKey resultType="long" keyProperty="id" order="BEFORE">
      select nextval('cbc_rest_log_seq') as value 
    </selectKey>
    insert into cbc_rest_log
    (id,template_id,user_name,log_date,status_code,url,info,path_one_name,path_one_value,path_two_name,path_two_value,path_three_name,path_three_value,node_parent,node_path,node_id,cbc_log_id)
    values
    (#{id},#{templateID},#{userName},#{logDate},#{statusCode},#{url},#{info},#{pathOneName, jdbcType=VARCHAR},#{pathOneValue, jdbcType=VARCHAR},#{pathTwoName, jdbcType=VARCHAR},#{pathTwoValue, jdbcType=VARCHAR},#{pathThreeName, jdbcType=VARCHAR},#{pathThreeValue, jdbcType=VARCHAR},#{nodeParent, jdbcType=VARCHAR},#{nodePath, jdbcType=VARCHAR},#{nodeID, jdbcType=NUMERIC},0)
  </insert>

  <select
    id="select_rest_log_by_id_user"
    resultType="String"
    parameterType="VisitedLogRestParameters"
  >
    SELECT
    a.path_one_value AS ig_id
    FROM (
    SELECT
    path_one_value, MAX(log_date)
    FROM
    cbc_rest_log
    WHERE
    template_id = #{id} AND user_name = #{username}
    GROUP BY
    path_one_value
    ORDER BY
    2 DESC) a
  </select>

  <select
    id="select_template_id"
    resultType="integer"
    parameterType="LogTemplate"
  >
    select id
    from cbc_rest_template
    where method = #{method} and template=#{template}
  </select>

  <insert id="insert_template" parameterType="LogTemplate">
    <selectKey resultType="integer" keyProperty="id" order="BEFORE">
      select nextval('cbc_rest_template_seq') as value 
    </selectKey>
    insert into cbc_rest_template (id,method,template)
    values (#{id},#{method},#{template})
  </insert>

  <delete id="delete_log_by_ig" parameterType="Long">
    delete from cbc_log where ig_id = #{igID}
  </delete>

  <select id="select_count_login" resultType="Integer">
    select count(*)
    from cbc_log
    where activity_id = (select id from cbc_log_activity where service_desc='Directory' and
    activity_desc='Login');
  </select>

  <select
    id="select_last_login_date_of_user"
    resultType="Date"
    parameterType="String"
  >
    select max(log_date) as last_login_date
    from cbc_log
    where user_name=#{username}
    and activity_id= (select cbc_log_activity.id from cbc_log_activity where activity_desc='Login')
  </select>

  <select
    id="select_count_actions_per_hour_yesterday"
    resultType="LogCountResult"
  >
    SELECT to_char(log_date, 'HH24') as hourPeriod, count(*) as numberOfActions
    FROM cbc_log
    WHERE log_date >= (CURRENT_DATE - INTERVAL '1 day') AND log_date &lt; CURRENT_DATE
    GROUP BY to_char(log_date, 'HH24')
    ORDER BY 1;
 </select>



 <select
    id="select_activity_of_interest_group"
    parameterType="Long"
    resultType="ActivityCount"
  >
  select to_char(log_date, 'MM YYYY') as monthActivity, service_desc as
  service, activity_desc as activity, activity_id as activityId, count(*) as actionNumber
  from cbc_log
  join cbc_log_activity on cbc_log.activity_id = cbc_log_activity.id
  where ig_id=#{igID}
  group by to_char(log_date, 'MM YYYY'), service_desc, activity_desc, activity_id
  having activity_id in(select id from cbc_log_activity where service_desc='Library' and (
  lower(activity_desc) like '%download content%' or lower(activity_desc) like '%browse content%'
  ))
  or activity_id=(select id from cbc_log_activity where activity_desc = 'Upload document' and
  service_desc='Library')
  or activity_id=(select id from cbc_log_activity where activity_desc = 'Create post' and
  service_desc='Newsgroup')
  or activity_id=(select id from cbc_log_activity where activity_desc = 'Read post' and
  service_desc='Newsgroup')
  or activity_id=(select id from cbc_log_activity where activity_desc = 'Add user and allocate
  profile' and service_desc='Administration')
  or activity_id=(select id from cbc_log_activity where activity_desc = 'Remove membership' and
  service_desc='Administration')
  order by 1 desc, 2
</select>


  <select id="select_last_log_for_ig" parameterType="Long" resultType="Date">
    select max(log_date) from cbc_log where ig_id=#{igID}
  </select>

  <select
    id="select_last_update_log_for_ig"
    parameterType="Long"
    resultType="Date"
  >
SELECT MAX(log_date)
FROM cbc_log
JOIN (
    SELECT id
    FROM cbc_log_activity
    WHERE 
        (service_desc = 'Library' AND activity_desc LIKE 'Add Content Translation%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Create Folder%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Create Link%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Create Space from Share%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Import ZIP or ACP%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Modify Dynamic Property%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Modify Folder%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Perform Checkin%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Remove Content%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Remove Folder%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Update content properties%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'UpdateDocument%')
        OR 
        (service_desc = 'Library' AND activity_desc LIKE 'Upload document%')
        OR 
        (service_desc = 'Administration' AND activity_desc LIKE 'Add%')
        OR 
        (service_desc = 'Administration' AND activity_desc LIKE 'Remove%')
        OR 
        (service_desc = 'Administration' AND activity_desc LIKE 'Update%')
        OR 
        (service_desc = 'Events' AND activity_desc LIKE 'Add Event%')
        OR 
        (service_desc = 'Events' AND activity_desc LIKE 'Modify Event%')
        OR 
        (service_desc = 'Events' AND activity_desc LIKE 'Remove Event or Meeting%')
        OR
        (service_desc = 'Information' AND activity_desc LIKE 'Add news%')
        OR
        (service_desc = 'Information' AND activity_desc LIKE 'Remove News%')
        OR
        (service_desc = 'Information' AND activity_desc LIKE 'Update News%')
        OR
        (service_desc = 'Information' AND activity_desc LIKE 'Browse information service%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Add Forum%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Add New Topic%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Add Reply%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Add Topic%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Modify Post%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Modify Topic%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Remove Forum%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Remove Post%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Remove Signaled Abuse%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Remove Topic%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Report Abuse%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Toggle Forum Moderation%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Update Forum%')
        OR
        (service_desc = 'Newsgroups' AND activity_desc LIKE 'Verify Post by Moderator%')
        OR
        (service_desc = 'Members' AND activity_desc LIKE 'Apply for Membership%')
        OR
        (service_desc = 'Members' AND activity_desc LIKE 'Bulk Invite%')
        OR
        (service_desc = 'Members' AND activity_desc LIKE 'Invite Users%')
        OR
        (service_desc = 'Members' AND activity_desc LIKE 'Remove Member%')
        OR
        (service_desc = 'Members' AND activity_desc LIKE 'Update Application for Membership%')
        OR
        (service_desc = 'Members' AND activity_desc LIKE 'Update Members%')
  ) AS activityIds
  ON cbc_log.activity_id = activityIds.id
  WHERE ig_id =#{igID}
  AND cbc_log.activity_id = activityIds.id
  </select>

  <select
    id="select_last_update_date_ig_statistics"
    parameterType="Long"
    resultType="Date"
  >
    select max(log_date)
    from cbc_log,
    (
        select id from cbc_log_activity where 
            (service_desc='Events' and (activity_desc like 'Add%' or activity_desc like 'Remove%'))
         or (service_desc='Information' and (activity_desc like 'Add%' or activity_desc like 'Remove%' or activity_desc like 'Upload%'))
         or (service_desc='Library' and (activity_desc like 'Add%' or activity_desc like'Create%' or activity_desc like'Import%' 
         or activity_desc like'Paste%' or activity_desc like 'Remove%' or activity_desc like 'Upload%'))
         or (service_desc='Members' and (activity_desc like '%Invite%' or activity_desc like'Remove%'))
         or (service_desc='Newsgroups' and (activity_desc like 'Add%' or activity_desc like'Remove%')) order by service_desc, activity_desc
    ) AS editionIds
    where ig_id=#{igID}
    and cbc_log.activity_id = editionIds.id
  </select>

  <select
    id="select_download_logs_for_user"
    parameterType="map"
    resultType="UserActionLogDAO"
  >
    select DOCUMENT_ID as documentId, IG_ID as igId, LOG_DATE as logDate
    from
    (select DOCUMENT_ID, IG_ID, LOG_DATE ,ROW_NUMBER() OVER () as ROWNUM
    from cbc_log
    where USER_NAME = #{userId,jdbcType=VARCHAR}
    and activity_id in (select cbc_log_activity.id from cbc_log_activity where activity_desc like
    '%browse%content%' or activity_desc like '%ownload%content%')
    and not cbc_log.document_id = -1
    order by log_date DESC ) AS downloads
    where #{nbResults} >= ROWNUM
  </select>

  <select
    id="select_upload_logs_for_user"
    parameterType="map"
    resultType="UserActionLogDAO"
  >
    select DOCUMENT_ID as documentId, IG_ID as igId, LOG_DATE as logDate
    from
    (select DOCUMENT_ID, IG_ID, LOG_DATE ,ROW_NUMBER() OVER () as ROWNUM
    from cbc_log
    where USER_NAME = #{userId,jdbcType=VARCHAR}
    and activity_id in (select cbc_log_activity.id from cbc_log_activity where activity_desc like
    '%pload%')
    and not cbc_log.document_id = -1
    order by log_date DESC ) AS uploads
    where #{nbResults} >= ROWNUM
  </select>

  <select
    id="select_group_news_feed_uploads"
    resultType="UserActionLogDAO"
    parameterType="UserNewsFeedRequest"
  >
    SELECT ig_id as igId, document_id as documentId, lower(activity_desc) as action, user_name as username, log_date as logDate
    FROM cbc_log
    JOIN cbc_log_activity ON cbc_log.activity_id = cbc_log_activity.id
    WHERE ig_id IN
    <foreach item="igId" collection="igIds" open="(" separator="," close=")">
      #{igId}
    </foreach>
    AND activity_id IN
    <foreach
      item="actId"
      collection="activityIds"
      open="("
      separator=","
      close=")"
    >
      #{actId}
    </foreach>
    AND
    <choose>
      <when test="when == 'today'">
        log_date >= DATE_TRUNC('day', CURRENT_DATE)
      </when>
      <when test="when == 'week'">
        log_date >= DATE_TRUNC('day', CURRENT_DATE - INTERVAL '7 days') AND log_date &lt; DATE_TRUNC('day', CURRENT_DATE)
      </when>
      <when test="when == 'previousWeek'">
        log_date >= DATE_TRUNC('day', CURRENT_DATE - INTERVAL '14 days') AND log_date &lt; DATE_TRUNC('day', CURRENT_DATE - INTERVAL '7 days')
      </when>
    </choose>
    ORDER BY log_date DESC
</select>


  <select id="select_activity_id_for_news_feed" resultType="Long">
    select id from cbc_log_activity where lower(activity_desc) like '%upload%document%' or
    lower(activity_desc) like '%add%translation%'
    or lower(activity_desc) like '%update%document%' or lower(activity_desc) like '%update%content%'
    or lower(activity_desc) like '%checkin%'
    or lower(activity_desc) like '%add%reply%'
  </select>
  <select id="select_rest_log" resultType="LogRest">
    SELECT
    cbc_rest_log.id id,
    cbc_rest_log.template_id templateID,
    cbc_rest_log.path_one_name pathOneName,
    cbc_rest_log.path_one_value pathOneValue,
    cbc_rest_log.path_two_name pathTwoName,
    cbc_rest_log.path_two_value pathTwoValue,
    cbc_rest_log.path_three_name pathThreeName,
    cbc_rest_log.path_three_value pathThreeValue,
    cbc_rest_log.user_name userName,
    cbc_rest_log.log_date logDate,
    cbc_rest_log.status_code statusCode,
    cbc_rest_log.url url,
    cbc_rest_log.info info,
    cbc_rest_log.node_parent nodeParent,
    cbc_rest_log.node_path nodePath,
    cbc_rest_log.node_id nodeID
    FROM
    cbc_rest_log
    INNER JOIN cbc_rest_template ON cbc_rest_log.template_id = cbc_rest_template.id
    INNER JOIN cbc_log_activity ON
    cbc_rest_template.service_desc = cbc_log_activity.service_desc
    AND
    cbc_rest_template.activity_desc = cbc_log_activity.activity_desc
    WHERE
    cbc_rest_log.cbc_log_id = 0
  </select>
  <select
    id="select_activity_id_by_template_id"
    resultType="Long"
    parameterType="Long"
  >
    SELECT
    cbc_log_activity.id
    FROM
    cbc_rest_template
    INNER JOIN cbc_log_activity ON
    cbc_rest_template.service_desc = cbc_log_activity.service_desc
    AND
    cbc_rest_template.activity_desc = cbc_log_activity.activity_desc
    WHERE
    cbc_rest_template.id =#{templateID}
  </select>
  <update id="update_cbc_log_id" parameterType="map">
    UPDATE cbc_rest_log SET cbc_log_id =#{logId} WHERE id =#{id}
  </update>
</mapper>
