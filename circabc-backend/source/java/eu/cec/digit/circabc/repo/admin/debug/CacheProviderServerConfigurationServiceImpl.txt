/*--+
|     Copyright European Community 2014 - Licensed under the EUPL V.1.0
|
|          http://ec.europa.eu/idabc/en/document/6523
|
+--*/
package eu.cec.digit.circabc.repo.admin.debug;

import eu.cec.digit.circabc.service.admin.debug.CacheReport;
import org.alfresco.enterprise.repo.cluster.core.HazelcastInstanceFactory;
import org.alfresco.repo.cache.SimpleCache;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.quartz.SchedulerException;
import org.springframework.aop.AfterReturningAdvice;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

/**
 * Implementation of cache reports for the current Alfresco cache provider.
 *
 * @author schwerr
 */
public class CacheProviderServerConfigurationServiceImpl extends ServerConfigurationServiceImpl
    implements AfterReturningAdvice {

  static final Log logger = LogFactory.getLog(CacheProviderServerConfigurationServiceImpl.class);

  // Clustered caches retrieved from Hazelcast
  private HazelcastInstanceFactory hazelcastInstanceFactory = null;

  // Caches being tracked
  private List<SimpleCache<Serializable, Object>> caches = new ArrayList<>();

  private Properties cacheProperties = null;

  /**
   * Implementation of cache retrieval for the current Alfresco cache provider.
   *
   * @see eu.cec.digit.circabc.repo.admin.debug.ServerConfigurationServiceImpl#getCaches()
   */
  @Override
  public List<CacheReport> getCaches() throws SchedulerException {

    final List<CacheReport> cacheReports = new ArrayList<>();

    for (SimpleCache<Serializable, Object> cache : caches) {
      cacheReports.add(new CacheReportImpl(cache, cacheProperties, hazelcastInstanceFactory));
    }

    return cacheReports;
  }

  /**
   * Traps cache creation and stores it for reporting.
   *
   * @see org.springframework.aop.AfterReturningAdvice#afterReturning(java.lang.Object,
   *     java.lang.reflect.Method, java.lang.Object[], java.lang.Object)
   */
  @Override
  @SuppressWarnings("unchecked")
  public void afterReturning(Object returnValue, Method method, Object[] args, Object target)
      throws Throwable {
    caches.add((SimpleCache<Serializable, Object>) returnValue);
  }

  /** @param hazelcastInstanceFactory the hazelcastInstanceFactory to set */
  public void setHazelcastInstanceFactory(HazelcastInstanceFactory hazelcastInstanceFactory) {
    this.hazelcastInstanceFactory = hazelcastInstanceFactory;
  }

  /** @param properties the properties to set */
  public void setProperties(Properties properties) {
    this.cacheProperties = properties;
  }
}
