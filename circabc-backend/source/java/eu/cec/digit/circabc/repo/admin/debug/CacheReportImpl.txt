/**
 * ***************************************************************************** Copyright 2006
 * European Community
 *
 * <p>Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European
 * Commission - subsequent versions of the EUPL (the "Licence"); You may not use this work except in
 * compliance with the Licence. You may obtain a copy of the Licence at:
 *
 * <p>https://joinup.ec.europa.eu/software/page/eupl
 *
 * <p>Unless required by applicable law or agreed to in writing, software distributed under the
 * Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the Licence for the specific language governing permissions and
 * limitations under the Licence.
 * ****************************************************************************
 */
package eu.cec.digit.circabc.repo.admin.debug;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.IMap;
import com.hazelcast.monitor.LocalMapStats;
import eu.cec.digit.circabc.service.admin.debug.CacheReport;
import org.alfresco.enterprise.repo.cluster.cache.HazelcastSimpleCache;
import org.alfresco.enterprise.repo.cluster.cache.InvalidatingCache;
import org.alfresco.enterprise.repo.cluster.core.ClusteredObjectProxyFactory.ClusteredObjectProxyInvoker;
import org.alfresco.enterprise.repo.cluster.core.HazelcastInstanceFactory;
import org.alfresco.repo.cache.DefaultSimpleCache;
import org.alfresco.repo.cache.SimpleCache;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.util.Collection;
import java.util.Properties;

/**
 * Concrete implementation of a Cache Report
 *
 * @author Yanick Pignot
 */
public class CacheReportImpl implements CacheReport {

  static final Log logger = LogFactory.getLog(CacheReportImpl.class);

  private static final String PROP_SEPERATOR = ".";
  private static final String DEFAULT_NOT_AVAILABLE = "NOT AVAILABLE";

  private HazelcastInstance hazelcastInstance = null;
  private Properties properties = null;

  private String memoryStoreEvictionPolicy = null;
  private String timeToLiveSeconds = null;
  private String timeToIdleSeconds = null;
  private String txMaxItems = null;
  private String maxItems = null;
  private String clusterType = null;
  private String backupCount = null;
  private String evictionPercentage = null;
  private String mergePolicy = null;

  private String dirtyEntryCount = null;

  private long size = 0L;
  private double sizeMB;
  private long maxSize;
  private long currentSize;
  private String hitCount;
  private double percentageFull;
  private double estMaxSize;
  private long totalMissCount;
  private double hitRatio;
  private String name;

  /** Creates and populates the cache report. */
  @SuppressWarnings("unchecked")
  public CacheReportImpl(
      SimpleCache<Serializable, Object> cache,
      Properties cacheProperties,
      HazelcastInstanceFactory hazelcastInstanceFactory) {

    this.properties = cacheProperties;

    try {
      hazelcastInstance = hazelcastInstanceFactory.getInstance();
    } catch (IllegalStateException e) {
      // Instance not initialized, hazelcastInstance remains null
    }

    Object backingCache = null;

    if (Proxy.isProxyClass(cache.getClass())) {
      InvocationHandler handler = Proxy.getInvocationHandler(cache);
      backingCache = ((ClusteredObjectProxyInvoker<Object>) handler).getBackingObject();
    } else {
      backingCache = cache;
    }

    // If the backing cache is a default cache
    if (SimpleCache.class.isAssignableFrom(backingCache.getClass())) {
      calculate((SimpleCache<Serializable, Object>) backingCache);
    }
  }

  /** Calculates all parameters to be reported for the given cache. */
  private synchronized void calculate(SimpleCache<Serializable, Object> cache) {

    // Calculate the cache deep size
    Collection<Serializable> keys = cache.getKeys();
    // Only count a maximum of 1000 entities
    int count = 0;
    for (Serializable key : keys) {
      Object element = cache.get(key);
      if (element != null && Serializable.class.isAssignableFrom(element.getClass())) {
        size += getSize((Serializable) element);
        count++;
      }
      //			if (count >= 1000) {
      //				break;
      //			}
    }

    // The size must be multiplied by the ratio of the count to actual size
    size = count > 0 ? (long) ((double) size * ((double) keys.size() / (double) count)) : 0L;
    sizeMB = (double) size / 1024.0 / 1024.0;

    hitCount = DEFAULT_NOT_AVAILABLE;
    dirtyEntryCount = DEFAULT_NOT_AVAILABLE;

    if (cache instanceof InvalidatingCache) {
      cache = (SimpleCache) getFieldValue(cache, "cache");
    }

    // Stats (TODO: Review this with tests)
    if (hazelcastInstance != null && cache instanceof HazelcastSimpleCache) {

      name = ((HazelcastSimpleCache<Serializable, Object>) cache).getCacheName();
      maxItems = getProperty(name, "maxItems", DEFAULT_NOT_AVAILABLE);
      maxSize = Long.parseLong(maxItems);

      IMap<Serializable, Object> map = hazelcastInstance.getMap(name);
      LocalMapStats stats = map.getLocalMapStats();

      hitCount = Long.toString(stats.getHits());
      dirtyEntryCount = Long.toString(stats.getDirtyEntryCount());
      // TODO: Get more stats
    } else {
      name = ((DefaultSimpleCache<Serializable, Object>) cache).getCacheName();
      maxSize = ((DefaultSimpleCache<Serializable, Object>) cache).getMaxItems();
      maxItems = String.valueOf(maxSize);
    }

    clusterType = getProperty(name, "cluster.type", DEFAULT_NOT_AVAILABLE);

    // Ugly BeanNameAware workaround (changes the name of the cache)
    // TODO: Find a better solution
    if (DEFAULT_NOT_AVAILABLE.equals(clusterType)) {
      name = "cache." + name;
      clusterType = getProperty(name, "cluster.type", DEFAULT_NOT_AVAILABLE);
    }

    memoryStoreEvictionPolicy = getProperty(name, "eviction-policy", DEFAULT_NOT_AVAILABLE);

    timeToLiveSeconds = getProperty(name, "timeToLiveSeconds", DEFAULT_NOT_AVAILABLE);
    timeToIdleSeconds = getProperty(name, "maxIdleSeconds", DEFAULT_NOT_AVAILABLE);

    // New added for Alfresco 4.2
    txMaxItems = getProperty(name, "tx.maxItems", DEFAULT_NOT_AVAILABLE);
    backupCount = getProperty(name, "backup-count", DEFAULT_NOT_AVAILABLE);
    evictionPercentage = getProperty(name, "eviction-percentage", DEFAULT_NOT_AVAILABLE);
    mergePolicy = getProperty(name, "merge-policy", DEFAULT_NOT_AVAILABLE);

    // Adapted calculations
    currentSize = count;
    percentageFull = (double) currentSize / (double) maxSize * 100.0;
    estMaxSize = size / (double) currentSize * (double) maxSize;
    //		totalMissCount = cache.getStatistics().getCacheMisses();
    //		hitRatio = (double) hitCount / (double)(totalMissCount + hitCount) * 100.0;
  }

  /** Unnests a field. */
  private Object getFieldValue(Object object, String fieldName) {

    try {
      Field cacheField = object.getClass().getDeclaredField(fieldName);
      cacheField.setAccessible(true);
      object = cacheField.get(object);
    } catch (Exception e) {
      logger.error("Exception when unnesting field.", e);
    }

    return object;
  }

  /** Gets the serialized size of a serializable object. */
  private long getSize(Serializable obj) {

    ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
    ObjectOutputStream oos = null;
    try {
      oos = new ObjectOutputStream(bout);
      oos.writeObject(obj);
      return bout.size();
    } catch (IOException e) {
      return 0L;
    } finally {
      try {
        if (oos != null) {
          oos.close();
        }
      } catch (IOException e) {
      }
    }
  }

  /** Retrieves a global cache property by its name. */
  private String getProperty(String cacheName, String propName, final String defaultValue) {

    final String fqPropName = cacheName + PROP_SEPERATOR + propName;
    String value = properties.getProperty(fqPropName);
    if (value != null) {
      value = value.trim();
    }
    if (value == null || value.isEmpty()) {
      value = defaultValue;
    }

    return value;
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getSize()
   */
  public synchronized long getSize() {
    return size;
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getEstimatedMaxSize()
   */
  public synchronized double getEstimatedMaxSize() {
    return estMaxSize;
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getCurrentSize()
   */
  public final String getCurrentSize() {
    return String.format("%10d entries", currentSize);
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getEstMaxSize()
   */
  public final String getEstMaxSize() {
    return String.format("%10.2f MB", estMaxSize);
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getHitCount()
   */
  public final String getHitCount() {
    return hitCount;
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getHitRatio()
   */
  public final String getHitRatio() {
    return String.format("%10.2f percent", hitRatio);
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getMaxSize()
   */
  public final String getMaxSize() {
    return String.format("%10d entries", maxSize);
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getPercentageFull()
   */
  public final String getPercentageFull() {
    return String.format("%10.2f percent", percentageFull);
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getSizeMB()
   */
  public final String getSizeMB() {
    return String.format("%10.2f MB", sizeMB);
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getTotalMissCount()
   */
  public final String getTotalMissCount() {
    return String.format("%10d misses", totalMissCount);
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getName()
   */
  public final String getName() {
    return name;
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getMemoryStoreEvictionPolicy()
   */
  public final String getMemoryStoreEvictionPolicy() {
    return memoryStoreEvictionPolicy;
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getTimeToIdleSeconds()
   */
  public final String getTimeToIdleSeconds() {
    return timeToIdleSeconds;
  }

  /* (non-Javadoc)
   * @see eu.cec.digit.circabc.repo.admin.debug.CacheReport#getTimeToLiveSeconds()
   */
  public final String getTimeToLiveSeconds() {
    return timeToLiveSeconds;
  }

  /** @return the txMaxItems */
  public String getTxMaxItems() {
    return txMaxItems;
  }

  /** @return the clusterType */
  public String getClusterType() {
    return clusterType;
  }

  /** @return the backupCount */
  public String getBackupCount() {
    return backupCount;
  }

  /** @return the evictionPercentage */
  public String getEvictionPercentage() {
    return evictionPercentage;
  }

  /** @return the mergePolicy */
  public String getMergePolicy() {
    return mergePolicy;
  }

  /** @return the dirtyEntryCount */
  public String getDirtyEntryCount() {
    return dirtyEntryCount;
  }
}
